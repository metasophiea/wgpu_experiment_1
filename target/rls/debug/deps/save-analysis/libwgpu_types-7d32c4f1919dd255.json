{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1","program":"/Users/metasophiea/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","wgpu_types","--edition=2018","/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=7d32c4f1919dd255","-C","extra-filename=-7d32c4f1919dd255","--out-dir","/Users/metasophiea/Code/Rust/lessions/wgpu/wgpu people/wgpu_experiment_1/target/rls/debug/deps","-L","dependency=/Users/metasophiea/Code/Rust/lessions/wgpu/wgpu people/wgpu_experiment_1/target/rls/debug/deps","--extern","bitflags=/Users/metasophiea/Code/Rust/lessions/wgpu/wgpu people/wgpu_experiment_1/target/rls/debug/deps/libbitflags-ed6dab84f9f9fb68.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/metasophiea/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/metasophiea/Code/Rust/lessions/wgpu/wgpu people/wgpu_experiment_1/target/rls/debug/deps/libwgpu_types-7d32c4f1919dd255.rmeta"},"prelude":{"crate_id":{"name":"wgpu_types","disambiguator":[6638465613681225577,13551981726451809897]},"crate_root":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src","external_crates":[{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9176452395873514981,10525323411957323785]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[15010738070622620763,9605760616786660431]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8211843569075862794,5370502913999467694]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5168977417888994485,12129851499920233632]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9254821246596336482,1562696929571001984]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4867494102928472883,16549916413327868340]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12208796569805280475,9421298070223625802]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[16776259526442764164,2692171601035033462]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[8506315589905780113,7752550639658555424]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6004073670142137807,10055010459345902388]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13812981793209371227,10465105188798852626]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[12279896640040761358,16819944754252654372]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[502125910674001101,4874613814734389117]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[6964077277237141888,7151316435171244180]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[5505266058476155326,9550778519957076375]}},{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","num":16,"id":{"name":"bitflags","disambiguator":[16116468340896408149,12780401407780675886]}}],"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":564,"byte_end":70029,"line_start":9,"line_end":1823,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":564,"byte_end":70029,"line_start":9,"line_end":1823,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":112},{"krate":0,"index":146},{"krate":0,"index":145},{"krate":0,"index":143},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":134},{"krate":0,"index":148},{"krate":0,"index":171},{"krate":0,"index":169},{"krate":0,"index":167},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":158},{"krate":0,"index":15},{"krate":0,"index":172},{"krate":0,"index":194},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":185},{"krate":0,"index":179},{"krate":0,"index":177},{"krate":0,"index":174},{"krate":0,"index":195},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":17},{"krate":0,"index":293},{"krate":0,"index":315},{"krate":0,"index":312},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":297},{"krate":0,"index":19},{"krate":0,"index":318},{"krate":0,"index":341},{"krate":0,"index":340},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":331},{"krate":0,"index":325},{"krate":0,"index":323},{"krate":0,"index":320},{"krate":0,"index":343},{"krate":0,"index":359},{"krate":0,"index":361},{"krate":0,"index":363},{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":411},{"krate":0,"index":461},{"krate":0,"index":528},{"krate":0,"index":526},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":477},{"krate":0,"index":475},{"krate":0,"index":472},{"krate":0,"index":22},{"krate":0,"index":530},{"krate":0,"index":538},{"krate":0,"index":536},{"krate":0,"index":534},{"krate":0,"index":540},{"krate":0,"index":562},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":553},{"krate":0,"index":547},{"krate":0,"index":545},{"krate":0,"index":542},{"krate":0,"index":563},{"krate":0,"index":571},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":579},{"krate":0,"index":589},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":609},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":641},{"krate":0,"index":667},{"krate":0,"index":665},{"krate":0,"index":663},{"krate":0,"index":660},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":668},{"krate":0,"index":721},{"krate":0,"index":719},{"krate":0,"index":717},{"krate":0,"index":714},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":722},{"krate":0,"index":751},{"krate":0,"index":749},{"krate":0,"index":747},{"krate":0,"index":744},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":24},{"krate":0,"index":752},{"krate":0,"index":768},{"krate":0,"index":766},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":756},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":770},{"krate":0,"index":787},{"krate":0,"index":785},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":775},{"krate":0,"index":31},{"krate":0,"index":789},{"krate":0,"index":818},{"krate":0,"index":816},{"krate":0,"index":814},{"krate":0,"index":811},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":819},{"krate":0,"index":839},{"krate":0,"index":837},{"krate":0,"index":835},{"krate":0,"index":832},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":33},{"krate":0,"index":840},{"krate":0,"index":863},{"krate":0,"index":861},{"krate":0,"index":859},{"krate":0,"index":856},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":35},{"krate":0,"index":864},{"krate":0,"index":879},{"krate":0,"index":877},{"krate":0,"index":875},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":881},{"krate":0,"index":1051},{"krate":0,"index":1049},{"krate":0,"index":1047},{"krate":0,"index":1044},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1052},{"krate":0,"index":1074},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1065},{"krate":0,"index":1059},{"krate":0,"index":1057},{"krate":0,"index":1054},{"krate":0,"index":1075},{"krate":0,"index":1085},{"krate":0,"index":1087},{"krate":0,"index":1089},{"krate":0,"index":1091},{"krate":0,"index":1093},{"krate":0,"index":1105},{"krate":0,"index":1108},{"krate":0,"index":1110},{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1123},{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":37},{"krate":0,"index":1163},{"krate":0,"index":1182},{"krate":0,"index":1180},{"krate":0,"index":1178},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1168},{"krate":0,"index":39},{"krate":0,"index":1184},{"krate":0,"index":1201},{"krate":0,"index":1199},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1189},{"krate":0,"index":43},{"krate":0,"index":1203},{"krate":0,"index":1223},{"krate":0,"index":1221},{"krate":0,"index":1219},{"krate":0,"index":1216},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":46},{"krate":0,"index":1224},{"krate":0,"index":1262},{"krate":0,"index":1260},{"krate":0,"index":1258},{"krate":0,"index":1255},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":48},{"krate":0,"index":1263},{"krate":0,"index":1280},{"krate":0,"index":1278},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1268},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":1282},{"krate":0,"index":1320},{"krate":0,"index":1318},{"krate":0,"index":1316},{"krate":0,"index":1313},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":54},{"krate":0,"index":1321},{"krate":0,"index":1341},{"krate":0,"index":1339},{"krate":0,"index":1337},{"krate":0,"index":1334},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1342},{"krate":0,"index":1358},{"krate":0,"index":1356},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1346},{"krate":0,"index":1360},{"krate":0,"index":1464},{"krate":0,"index":1462},{"krate":0,"index":1460},{"krate":0,"index":1457},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":56},{"krate":0,"index":1465},{"krate":0,"index":1487},{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1478},{"krate":0,"index":1472},{"krate":0,"index":1470},{"krate":0,"index":1467},{"krate":0,"index":1488},{"krate":0,"index":1501},{"krate":0,"index":1503},{"krate":0,"index":1505},{"krate":0,"index":1507},{"krate":0,"index":1509},{"krate":0,"index":1524},{"krate":0,"index":1527},{"krate":0,"index":1529},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1537},{"krate":0,"index":1539},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1547},{"krate":0,"index":1550},{"krate":0,"index":1591},{"krate":0,"index":1615},{"krate":0,"index":1612},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1601},{"krate":0,"index":1603},{"krate":0,"index":1597},{"krate":0,"index":58},{"krate":0,"index":1618},{"krate":0,"index":1639},{"krate":0,"index":1636},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1625},{"krate":0,"index":1627},{"krate":0,"index":1621},{"krate":0,"index":63},{"krate":0,"index":68},{"krate":0,"index":1642},{"krate":0,"index":1665},{"krate":0,"index":1663},{"krate":0,"index":1661},{"krate":0,"index":1658},{"krate":0,"index":1659},{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":1652},{"krate":0,"index":1666},{"krate":0,"index":1688},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1679},{"krate":0,"index":1673},{"krate":0,"index":1671},{"krate":0,"index":1668},{"krate":0,"index":1689},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1717},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1725},{"krate":0,"index":1727},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1735},{"krate":0,"index":1737},{"krate":0,"index":1740},{"krate":0,"index":1743},{"krate":0,"index":1772},{"krate":0,"index":1790},{"krate":0,"index":1788},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1778},{"krate":0,"index":1792},{"krate":0,"index":1803},{"krate":0,"index":1805},{"krate":0,"index":1819},{"krate":0,"index":1818},{"krate":0,"index":1816},{"krate":0,"index":1814},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":71},{"krate":0,"index":1821},{"krate":0,"index":1841},{"krate":0,"index":1839},{"krate":0,"index":1837},{"krate":0,"index":1834},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1842},{"krate":0,"index":1859},{"krate":0,"index":1858},{"krate":0,"index":1856},{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1846},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":1861},{"krate":0,"index":1878},{"krate":0,"index":1877},{"krate":0,"index":1875},{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1865},{"krate":0,"index":82},{"krate":0,"index":1880},{"krate":0,"index":1907},{"krate":0,"index":1904},{"krate":0,"index":1898},{"krate":0,"index":1900},{"krate":0,"index":1893},{"krate":0,"index":1895},{"krate":0,"index":1889},{"krate":0,"index":84},{"krate":0,"index":1910},{"krate":0,"index":1930},{"krate":0,"index":1928},{"krate":0,"index":1926},{"krate":0,"index":1923},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":89},{"krate":0,"index":1931},{"krate":0,"index":1954},{"krate":0,"index":1952},{"krate":0,"index":1950},{"krate":0,"index":1947},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":91},{"krate":0,"index":1955},{"krate":0,"index":1975},{"krate":0,"index":1973},{"krate":0,"index":1971},{"krate":0,"index":1968},{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":93},{"krate":0,"index":1976},{"krate":0,"index":1991},{"krate":0,"index":1989},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1979},{"krate":0,"index":1993},{"krate":0,"index":2017},{"krate":0,"index":2014},{"krate":0,"index":2011},{"krate":0,"index":2005},{"krate":0,"index":2007},{"krate":0,"index":2000},{"krate":0,"index":2002},{"krate":0,"index":1996},{"krate":0,"index":95},{"krate":0,"index":2020},{"krate":0,"index":2041},{"krate":0,"index":2038},{"krate":0,"index":2032},{"krate":0,"index":2034},{"krate":0,"index":2027},{"krate":0,"index":2029},{"krate":0,"index":2023},{"krate":0,"index":100},{"krate":0,"index":105},{"krate":0,"index":2044},{"krate":0,"index":2064},{"krate":0,"index":2062},{"krate":0,"index":2060},{"krate":0,"index":2057},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":108},{"krate":0,"index":2065},{"krate":0,"index":2073},{"krate":0,"index":2071},{"krate":0,"index":2069},{"krate":0,"index":2075},{"krate":0,"index":2105},{"krate":0,"index":2103},{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":2093},{"krate":0,"index":110},{"krate":0,"index":2107},{"krate":0,"index":2124},{"krate":0,"index":2122},{"krate":0,"index":2118},{"krate":0,"index":2119},{"krate":0,"index":2115},{"krate":0,"index":2116},{"krate":0,"index":2112},{"krate":0,"index":2126},{"krate":0,"index":2133},{"krate":0,"index":2130},{"krate":0,"index":2136},{"krate":0,"index":2144},{"krate":0,"index":2141}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(intra_doc_link_resolution_failure)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":564,"byte_end":608,"line_start":9,"line_end":9,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":6},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":766,"byte_end":779,"line_start":16,"line_end":16,"column_start":10,"column_end":23},"name":"BufferAddress","qualname":"::BufferAddress","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Integral type used for buffer offsets.\n","sig":null,"attributes":[{"value":"/ Integral type used for buffer offsets.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":714,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":7},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":843,"byte_end":853,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"name":"BufferSize","qualname":"::BufferSize","value":"std::num::NonZeroU64","parent":null,"children":[],"decl_id":null,"docs":" Integral type used for buffer slice sizes.\n","sig":null,"attributes":[{"value":"/ Integral type used for buffer slice sizes.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":787,"byte_end":833,"line_start":17,"line_end":17,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":8},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":944,"byte_end":958,"line_start":20,"line_end":20,"column_start":10,"column_end":24},"name":"ShaderLocation","qualname":"::ShaderLocation","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Integral type used for binding locations in shaders.\n","sig":null,"attributes":[{"value":"/ Integral type used for binding locations in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":878,"byte_end":934,"line_start":19,"line_end":19,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":9},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1030,"byte_end":1043,"line_start":22,"line_end":22,"column_start":10,"column_end":23},"name":"DynamicOffset","qualname":"::DynamicOffset","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Integral type used for dynamic bind group offsets.\n","sig":null,"attributes":[{"value":"/ Integral type used for dynamic bind group offsets.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":966,"byte_end":1020,"line_start":21,"line_end":21,"column_start":1,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":10},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1256,"byte_end":1284,"line_start":29,"line_end":29,"column_start":11,"column_end":39},"name":"COPY_BYTES_PER_ROW_ALIGNMENT","qualname":"::COPY_BYTES_PER_ROW_ALIGNMENT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Buffer-Texture copies must have [`bytes_per_row`] aligned to this number.","sig":null,"attributes":[{"value":"/ Buffer-Texture copies must have [`bytes_per_row`] aligned to this number.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1052,"byte_end":1129,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1130,"byte_end":1133,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ This doesn't apply to [`Queue::write_texture`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1134,"byte_end":1185,"line_start":26,"line_end":26,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1186,"byte_end":1189,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`bytes_per_row`]: TextureDataLayout::bytes_per_row","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1190,"byte_end":1245,"line_start":28,"line_end":28,"column_start":1,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":11},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1380,"byte_end":1401,"line_start":31,"line_end":31,"column_start":11,"column_end":32},"name":"BIND_BUFFER_ALIGNMENT","qualname":"::BIND_BUFFER_ALIGNMENT","value":"BufferAddress","parent":null,"children":[],"decl_id":null,"docs":" Bound uniform/storage buffer offsets must be aligned to this number.\n","sig":null,"attributes":[{"value":"/ Bound uniform/storage buffer offsets must be aligned to this number.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1297,"byte_end":1369,"line_start":30,"line_end":30,"column_start":1,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":12},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1510,"byte_end":1531,"line_start":33,"line_end":33,"column_start":11,"column_end":32},"name":"COPY_BUFFER_ALIGNMENT","qualname":"::COPY_BUFFER_ALIGNMENT","value":"BufferAddress","parent":null,"children":[],"decl_id":null,"docs":" Buffer to buffer copy offsets and sizes must be aligned to this number.\n","sig":null,"attributes":[{"value":"/ Buffer to buffer copy offsets and sizes must be aligned to this number.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1424,"byte_end":1499,"line_start":32,"line_end":32,"column_start":1,"column_end":76}}]},{"kind":"Const","id":{"krate":0,"index":13},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1623,"byte_end":1646,"line_start":35,"line_end":35,"column_start":11,"column_end":34},"name":"VERTEX_STRIDE_ALIGNMENT","qualname":"::VERTEX_STRIDE_ALIGNMENT","value":"BufferAddress","parent":null,"children":[],"decl_id":null,"docs":" Vertex buffer strides have to be aligned to this number.\n","sig":null,"attributes":[{"value":"/ Vertex buffer strides have to be aligned to this number.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1552,"byte_end":1612,"line_start":34,"line_end":34,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":14},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1715,"byte_end":1738,"line_start":37,"line_end":37,"column_start":11,"column_end":34},"name":"PUSH_CONSTANT_ALIGNMENT","qualname":"::PUSH_CONSTANT_ALIGNMENT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Alignment all push constants need\n","sig":null,"attributes":[{"value":"/ Alignment all push constants need","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1667,"byte_end":1704,"line_start":36,"line_end":36,"column_start":1,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":113},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1971,"byte_end":1976,"line_start":45,"line_end":45,"column_start":5,"column_end":10},"name":"Empty","qualname":"::Backend::Empty","value":"Backend::Empty","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":116},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1986,"byte_end":1992,"line_start":46,"line_end":46,"column_start":5,"column_end":11},"name":"Vulkan","qualname":"::Backend::Vulkan","value":"Backend::Vulkan","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":119},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2002,"byte_end":2007,"line_start":47,"line_end":47,"column_start":5,"column_end":10},"name":"Metal","qualname":"::Backend::Metal","value":"Backend::Metal","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":122},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2017,"byte_end":2021,"line_start":48,"line_end":48,"column_start":5,"column_end":9},"name":"Dx12","qualname":"::Backend::Dx12","value":"Backend::Dx12","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":125},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2031,"byte_end":2035,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Dx11","qualname":"::Backend::Dx11","value":"Backend::Dx11","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":128},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2045,"byte_end":2047,"line_start":50,"line_end":50,"column_start":5,"column_end":7},"name":"Gl","qualname":"::Backend::Gl","value":"Backend::Gl","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":131},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2057,"byte_end":2070,"line_start":51,"line_end":51,"column_start":5,"column_end":18},"name":"BrowserWebGpu","qualname":"::Backend::BrowserWebGpu","value":"Backend::BrowserWebGpu","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":112},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1957,"byte_end":1964,"line_start":44,"line_end":44,"column_start":10,"column_end":17},"name":"Backend","qualname":"::Backend","value":"pub enum Backend {\n    Empty = ,\n    Vulkan = ,\n    Metal = ,\n    Dx12 = ,\n    Dx11 = ,\n    Gl = ,\n    BrowserWebGpu = ,\n}","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131}],"decl_id":null,"docs":" Backends supported by wgpu.\n","sig":null,"attributes":[{"value":"/ Backends supported by wgpu.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1750,"byte_end":1781,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"repr(u8)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":1782,"byte_end":1793,"line_start":40,"line_end":40,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":149},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2404,"byte_end":2411,"line_start":61,"line_end":61,"column_start":5,"column_end":12},"name":"Default","qualname":"::PowerPreference::Default","value":"PowerPreference::Default","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Prefer low power when on battery, high performance when on mains.\n","sig":null,"attributes":[{"value":"/ Prefer low power when on battery, high performance when on mains.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2330,"byte_end":2399,"line_start":60,"line_end":60,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":152},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2507,"byte_end":2515,"line_start":63,"line_end":63,"column_start":5,"column_end":13},"name":"LowPower","qualname":"::PowerPreference::LowPower","value":"PowerPreference::LowPower","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Adapter that uses the least possible power. This is often an integerated GPU.\n","sig":null,"attributes":[{"value":"/ Adapter that uses the least possible power. This is often an integerated GPU.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2421,"byte_end":2502,"line_start":62,"line_end":62,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":155},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2605,"byte_end":2620,"line_start":65,"line_end":65,"column_start":5,"column_end":20},"name":"HighPerformance","qualname":"::PowerPreference::HighPerformance","value":"PowerPreference::HighPerformance","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Adapter that has the highest performance. This is often a discrete GPU.\n","sig":null,"attributes":[{"value":"/ Adapter that has the highest performance. This is often a discrete GPU.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2525,"byte_end":2600,"line_start":64,"line_end":64,"column_start":5,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":148},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2308,"byte_end":2323,"line_start":59,"line_end":59,"column_start":10,"column_end":25},"name":"PowerPreference","qualname":"::PowerPreference","value":"pub enum PowerPreference {\n\n    /// Prefer low power when on battery, high performance when on mains.\n    Default = ,\n\n    /// Adapter that uses the least possible power. This is often an integerated GPU.\n    LowPower = ,\n\n    /// Adapter that has the highest performance. This is often a discrete GPU.\n    HighPerformance = ,\n}","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":155}],"decl_id":null,"docs":" Power Preference when choosing a physical adapter.\n","sig":null,"attributes":[{"value":"/ Power Preference when choosing a physical adapter.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2079,"byte_end":2133,"line_start":54,"line_end":54,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2134,"byte_end":2144,"line_start":55,"line_end":55,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":172},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2969,"byte_end":2979,"line_start":79,"line_end":79,"column_start":16,"column_end":26},"name":"BackendBit","qualname":"::BackendBit","value":"BackendBit {  }","parent":null,"children":[{"krate":0,"index":173}],"decl_id":null,"docs":" Represents the backends that wgpu will use.\n","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.2.1/src/lib.rs","byte_start":7813248,"byte_end":7813257,"line_start":405,"line_end":405,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":216},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":3121,"byte_end":3127,"line_start":81,"line_end":81,"column_start":15,"column_end":21},"name":"VULKAN","qualname":"::BackendBit::VULKAN","value":"BackendBit","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":" Supported on Windows, Linux/Android, and macOS/iOS via Vulkan Portability (with the Vulkan feature enabled)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":217},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":3207,"byte_end":3209,"line_start":83,"line_end":83,"column_start":15,"column_end":17},"name":"GL","qualname":"::BackendBit::GL","value":"BackendBit","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":" Currently unsupported\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":218},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":3286,"byte_end":3291,"line_start":85,"line_end":85,"column_start":15,"column_end":20},"name":"METAL","qualname":"::BackendBit::METAL","value":"BackendBit","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":" Supported on macOS/iOS\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":219},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":3372,"byte_end":3376,"line_start":87,"line_end":87,"column_start":15,"column_end":19},"name":"DX12","qualname":"::BackendBit::DX12","value":"BackendBit","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":" Supported on Windows 10\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":220},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":3456,"byte_end":3460,"line_start":89,"line_end":89,"column_start":15,"column_end":19},"name":"DX11","qualname":"::BackendBit::DX11","value":"BackendBit","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":" Supported on Windows 7+\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":221},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":3569,"byte_end":3583,"line_start":91,"line_end":91,"column_start":15,"column_end":29},"name":"BROWSER_WEBGPU","qualname":"::BackendBit::BROWSER_WEBGPU","value":"BackendBit","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":" Supported when targeting the web through webassembly\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":222},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":3768,"byte_end":3775,"line_start":95,"line_end":95,"column_start":15,"column_end":22},"name":"PRIMARY","qualname":"::BackendBit::PRIMARY","value":"BackendBit","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":" All the apis that wgpu offers first tier of support for.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":223},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4077,"byte_end":4086,"line_start":103,"line_end":103,"column_start":15,"column_end":24},"name":"SECONDARY","qualname":"::BackendBit::SECONDARY","value":"BackendBit","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":" All the apis that wgpu offers second tier of support for. These may\n be unsupported/still experimental.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":293},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4482,"byte_end":4503,"line_start":118,"line_end":118,"column_start":12,"column_end":33},"name":"RequestAdapterOptions","qualname":"::RequestAdapterOptions","value":"RequestAdapterOptions { power_preference, compatible_surface }","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296}],"decl_id":null,"docs":" Options for requesting adapter.\n","sig":null,"attributes":[{"value":"/ Options for requesting adapter.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4276,"byte_end":4311,"line_start":113,"line_end":113,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4312,"byte_end":4322,"line_start":114,"line_end":114,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":295},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4559,"byte_end":4575,"line_start":120,"line_end":120,"column_start":9,"column_end":25},"name":"power_preference","qualname":"::RequestAdapterOptions::power_preference","value":"PowerPreference","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Power preference for the adapter.\n","sig":null,"attributes":[{"value":"/ Power preference for the adapter.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4513,"byte_end":4550,"line_start":119,"line_end":119,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":296},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4785,"byte_end":4803,"line_start":123,"line_end":123,"column_start":9,"column_end":27},"name":"compatible_surface","qualname":"::RequestAdapterOptions::compatible_surface","value":"std::option::Option<S>","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Surface that is required to be presentable with the requested adapter. This does not\n create the surface, only guarantees that the adapter can present to said surface.\n","sig":null,"attributes":[{"value":"/ Surface that is required to be presentable with the requested adapter. This does not","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4598,"byte_end":4686,"line_start":121,"line_end":121,"column_start":5,"column_end":93}},{"value":"/ create the surface, only guarantees that the adapter can present to said surface.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4691,"byte_end":4776,"line_start":122,"line_end":122,"column_start":5,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":318},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":5633,"byte_end":5641,"line_start":148,"line_end":148,"column_start":16,"column_end":24},"name":"Features","qualname":"::Features","value":"Features {  }","parent":null,"children":[{"krate":0,"index":319}],"decl_id":null,"docs":" Features that are not guaranteed to be supported.","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.2.1/src/lib.rs","byte_start":7813248,"byte_end":7813257,"line_start":405,"line_end":405,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":368},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":6166,"byte_end":6180,"line_start":160,"line_end":160,"column_start":15,"column_end":29},"name":"DEPTH_CLAMPING","qualname":"::Features::DEPTH_CLAMPING","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" By default, polygon depth is clipped to 0-1 range. Anything outside of that range\n is rejected, and respective fragments are not touched.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":369},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":6615,"byte_end":6637,"line_start":171,"line_end":171,"column_start":15,"column_end":37},"name":"TEXTURE_COMPRESSION_BC","qualname":"::Features::TEXTURE_COMPRESSION_BC","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Enables BCn family of compressed textures. All BCn textures use 4x4 pixel blocks\n with 8 or 16 bytes per block.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":370},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":7206,"byte_end":7230,"line_start":183,"line_end":183,"column_start":15,"column_end":39},"name":"MAPPABLE_PRIMARY_BUFFERS","qualname":"::Features::MAPPABLE_PRIMARY_BUFFERS","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Webgpu only allows the MAP_READ and MAP_WRITE buffer usage to be matched with\n COPY_DST and COPY_SRC respectively. This removes this requirement.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":371},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":7733,"byte_end":7762,"line_start":197,"line_end":197,"column_start":15,"column_end":44},"name":"SAMPLED_TEXTURE_BINDING_ARRAY","qualname":"::Features::SAMPLED_TEXTURE_BINDING_ARRAY","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Allows the user to create uniform arrays of sampled textures in shaders:","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":372},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":8302,"byte_end":8340,"line_start":210,"line_end":210,"column_start":15,"column_end":53},"name":"SAMPLED_TEXTURE_ARRAY_DYNAMIC_INDEXING","qualname":"::Features::SAMPLED_TEXTURE_ARRAY_DYNAMIC_INDEXING","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Allows shaders to index sampled texture arrays with dynamically uniform values:","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":373},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":9226,"byte_end":9268,"line_start":230,"line_end":230,"column_start":15,"column_end":57},"name":"SAMPLED_TEXTURE_ARRAY_NON_UNIFORM_INDEXING","qualname":"::Features::SAMPLED_TEXTURE_ARRAY_NON_UNIFORM_INDEXING","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Allows shaders to index sampled texture arrays with dynamically non-uniform values:","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":374},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":9800,"byte_end":9821,"line_start":243,"line_end":243,"column_start":15,"column_end":36},"name":"UNSIZED_BINDING_ARRAY","qualname":"::Features::UNSIZED_BINDING_ARRAY","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Allows the user to create unsized uniform arrays of bindings:","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":375},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":10236,"byte_end":10255,"line_start":254,"line_end":254,"column_start":15,"column_end":34},"name":"MULTI_DRAW_INDIRECT","qualname":"::Features::MULTI_DRAW_INDIRECT","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Allows the user to call [`RenderPass::multi_draw_indirect`] and [`RenderPass::multi_draw_indexed_indirect`].","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":376},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":10705,"byte_end":10730,"line_start":264,"line_end":264,"column_start":15,"column_end":40},"name":"MULTI_DRAW_INDIRECT_COUNT","qualname":"::Features::MULTI_DRAW_INDIRECT_COUNT","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Allows the user to call [`RenderPass::multi_draw_indirect_count`] and [`RenderPass::multi_draw_indexed_indirect_count`].","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":377},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":11498,"byte_end":11512,"line_start":281,"line_end":281,"column_start":15,"column_end":29},"name":"PUSH_CONSTANTS","qualname":"::Features::PUSH_CONSTANTS","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Allows the use of push constants: small, fast bits of memory that can be updated\n inside a [`RenderPass`].","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":378},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":11621,"byte_end":11631,"line_start":283,"line_end":283,"column_start":15,"column_end":25},"name":"ALL_WEBGPU","qualname":"::Features::ALL_WEBGPU","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Features which are part of the upstream WebGPU standard.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":379},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":11749,"byte_end":11759,"line_start":285,"line_end":285,"column_start":15,"column_end":25},"name":"ALL_NATIVE","qualname":"::Features::ALL_NATIVE","value":"Features","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Features that are only available when targeting native (not web).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":461},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12680,"byte_end":12686,"line_start":305,"line_end":305,"column_start":12,"column_end":18},"name":"Limits","qualname":"::Limits","value":"Limits { max_bind_groups, max_dynamic_uniform_buffers_per_pipeline_layout, max_dynamic_storage_buffers_per_pipeline_layout, max_sampled_textures_per_shader_stage, max_samplers_per_shader_stage, max_storage_buffers_per_shader_stage, max_storage_textures_per_shader_stage, max_uniform_buffers_per_shader_stage, max_uniform_buffer_binding_size, max_push_constant_size }","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" Represents the sets of limits an adapter/device supports.","sig":null,"attributes":[{"value":"/ Represents the sets of limits an adapter/device supports.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":11794,"byte_end":11855,"line_start":289,"line_end":289,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":11856,"byte_end":11859,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ Limits \"better\" than the default must be supported by the adapter and requested when requesting","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":11860,"byte_end":11959,"line_start":291,"line_end":291,"column_start":1,"column_end":100}},{"value":"/ a device. If limits \"better\" than the adapter supports are requested, requesting a device will panic.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":11960,"byte_end":12065,"line_start":292,"line_end":292,"column_start":1,"column_end":106}},{"value":"/ Once a device is requested, you may only use resources up to the limits requested _even_ if the","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12066,"byte_end":12165,"line_start":293,"line_end":293,"column_start":1,"column_end":100}},{"value":"/ adapter supports \"better\" limits.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12166,"byte_end":12203,"line_start":294,"line_end":294,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12204,"byte_end":12207,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ Requesting limits that are \"better\" than you need may cause performance to decrease because the","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12208,"byte_end":12307,"line_start":296,"line_end":296,"column_start":1,"column_end":100}},{"value":"/ implementation needs to support more than is needed. You should ideally only request exactly what","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12308,"byte_end":12409,"line_start":297,"line_end":297,"column_start":1,"column_end":102}},{"value":"/ you need.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12410,"byte_end":12423,"line_start":298,"line_end":298,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12424,"byte_end":12427,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ See also: https://gpuweb.github.io/gpuweb/#dictdef-gpulimits","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12428,"byte_end":12492,"line_start":300,"line_end":300,"column_start":1,"column_end":65}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12493,"byte_end":12503,"line_start":301,"line_end":301,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":462},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12815,"byte_end":12830,"line_start":307,"line_end":307,"column_start":9,"column_end":24},"name":"max_bind_groups","qualname":"::Limits::max_bind_groups","value":"u32","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Amount of bind groups that can be attached to a pipeline at the same time. Defaults to 4. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of bind groups that can be attached to a pipeline at the same time. Defaults to 4. Higher is \"better\".","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12693,"byte_end":12806,"line_start":306,"line_end":306,"column_start":5,"column_end":118}}]},{"kind":"Field","id":{"krate":0,"index":463},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12964,"byte_end":13011,"line_start":309,"line_end":309,"column_start":9,"column_end":56},"name":"max_dynamic_uniform_buffers_per_pipeline_layout","qualname":"::Limits::max_dynamic_uniform_buffers_per_pipeline_layout","value":"u32","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Amount of uniform buffer bindings that can be dynamic in a single pipeline. Defaults to 8. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of uniform buffer bindings that can be dynamic in a single pipeline. Defaults to 8. Higher is \"better\".","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":12841,"byte_end":12955,"line_start":308,"line_end":308,"column_start":5,"column_end":119}}]},{"kind":"Field","id":{"krate":0,"index":464},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13145,"byte_end":13192,"line_start":311,"line_end":311,"column_start":9,"column_end":56},"name":"max_dynamic_storage_buffers_per_pipeline_layout","qualname":"::Limits::max_dynamic_storage_buffers_per_pipeline_layout","value":"u32","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Amount of storage buffer bindings that can be dynamic in a single pipeline. Defaults to 4. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of storage buffer bindings that can be dynamic in a single pipeline. Defaults to 4. Higher is \"better\".","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13022,"byte_end":13136,"line_start":310,"line_end":310,"column_start":5,"column_end":119}}]},{"kind":"Field","id":{"krate":0,"index":465},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13312,"byte_end":13349,"line_start":313,"line_end":313,"column_start":9,"column_end":46},"name":"max_sampled_textures_per_shader_stage","qualname":"::Limits::max_sampled_textures_per_shader_stage","value":"u32","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Amount of sampled textures visible in a single shader stage. Defaults to 16. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of sampled textures visible in a single shader stage. Defaults to 16. Higher is \"better\".","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13203,"byte_end":13303,"line_start":312,"line_end":312,"column_start":5,"column_end":105}}]},{"kind":"Field","id":{"krate":0,"index":466},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13461,"byte_end":13490,"line_start":315,"line_end":315,"column_start":9,"column_end":38},"name":"max_samplers_per_shader_stage","qualname":"::Limits::max_samplers_per_shader_stage","value":"u32","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Amount of samplers visible in a single shader stage. Defaults to 16. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of samplers visible in a single shader stage. Defaults to 16. Higher is \"better\".","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13360,"byte_end":13452,"line_start":314,"line_end":314,"column_start":5,"column_end":97}}]},{"kind":"Field","id":{"krate":0,"index":467},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13608,"byte_end":13644,"line_start":317,"line_end":317,"column_start":9,"column_end":45},"name":"max_storage_buffers_per_shader_stage","qualname":"::Limits::max_storage_buffers_per_shader_stage","value":"u32","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Amount of storage buffers visible in a single shader stage. Defaults to 4. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of storage buffers visible in a single shader stage. Defaults to 4. Higher is \"better\".","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13501,"byte_end":13599,"line_start":316,"line_end":316,"column_start":5,"column_end":103}}]},{"kind":"Field","id":{"krate":0,"index":468},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13763,"byte_end":13800,"line_start":319,"line_end":319,"column_start":9,"column_end":46},"name":"max_storage_textures_per_shader_stage","qualname":"::Limits::max_storage_textures_per_shader_stage","value":"u32","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Amount of storage textures visible in a single shader stage. Defaults to 4. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of storage textures visible in a single shader stage. Defaults to 4. Higher is \"better\".","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13655,"byte_end":13754,"line_start":318,"line_end":318,"column_start":5,"column_end":104}}]},{"kind":"Field","id":{"krate":0,"index":469},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13919,"byte_end":13955,"line_start":321,"line_end":321,"column_start":9,"column_end":45},"name":"max_uniform_buffers_per_shader_stage","qualname":"::Limits::max_uniform_buffers_per_shader_stage","value":"u32","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Amount of uniform buffers visible in a single shader stage. Defaults to 12. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of uniform buffers visible in a single shader stage. Defaults to 12. Higher is \"better\".","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13811,"byte_end":13910,"line_start":320,"line_end":320,"column_start":5,"column_end":104}}]},{"kind":"Field","id":{"krate":0,"index":470},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14073,"byte_end":14104,"line_start":323,"line_end":323,"column_start":9,"column_end":40},"name":"max_uniform_buffer_binding_size","qualname":"::Limits::max_uniform_buffer_binding_size","value":"u32","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Maximum size in bytes of a binding to a uniform buffer. Defaults to 16384. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Maximum size in bytes of a binding to a uniform buffer. Defaults to 16384. Higher is \"better\".","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":13966,"byte_end":14064,"line_start":322,"line_end":322,"column_start":5,"column_end":103}}]},{"kind":"Field","id":{"krate":0,"index":471},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14587,"byte_end":14609,"line_start":333,"line_end":333,"column_start":9,"column_end":31},"name":"max_push_constant_size","qualname":"::Limits::max_push_constant_size","value":"u32","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Amount of storage available for push constants in bytes. Defaults to 0. Higher is \"better\".\n Requesting more than 0 during device creation requires [`Features::PUSH_CONSTANTS`] to be enabled.","sig":null,"attributes":[{"value":"/ Amount of storage available for push constants in bytes. Defaults to 0. Higher is \"better\".","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14115,"byte_end":14210,"line_start":324,"line_end":324,"column_start":5,"column_end":100}},{"value":"/ Requesting more than 0 during device creation requires [`Features::PUSH_CONSTANTS`] to be enabled.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14215,"byte_end":14317,"line_start":325,"line_end":325,"column_start":5,"column_end":107}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14322,"byte_end":14325,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Expect the size to be:","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14330,"byte_end":14356,"line_start":327,"line_end":327,"column_start":5,"column_end":31}},{"value":"/ - Vulkan: 128-256 bytes","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14361,"byte_end":14388,"line_start":328,"line_end":328,"column_start":5,"column_end":32}},{"value":"/ - DX12: 256 bytes","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14393,"byte_end":14414,"line_start":329,"line_end":329,"column_start":5,"column_end":26}},{"value":"/ - Metal: 4096 bytes","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14419,"byte_end":14442,"line_start":330,"line_end":330,"column_start":5,"column_end":28}},{"value":"/ - DX11 & OpenGL don't natively support push constants, and are emulated with uniforms,","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14447,"byte_end":14537,"line_start":331,"line_end":331,"column_start":5,"column_end":95}},{"value":"/   so this number is less useful.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14542,"byte_end":14578,"line_start":332,"line_end":332,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":530},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15408,"byte_end":15424,"line_start":358,"line_end":358,"column_start":12,"column_end":28},"name":"DeviceDescriptor","qualname":"::DeviceDescriptor","value":"DeviceDescriptor { features, limits, shader_validation }","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533}],"decl_id":null,"docs":" Describes a [`Device`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Device`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15222,"byte_end":15249,"line_start":353,"line_end":353,"column_start":1,"column_end":28}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15250,"byte_end":15260,"line_start":354,"line_end":354,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":531},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15570,"byte_end":15578,"line_start":361,"line_end":361,"column_start":9,"column_end":17},"name":"features","qualname":"::DeviceDescriptor::features","value":"Features","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Features that the device should support. If any feature is not supported by\n the adapter, creating a device will panic.\n","sig":null,"attributes":[{"value":"/ Features that the device should support. If any feature is not supported by","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15431,"byte_end":15510,"line_start":359,"line_end":359,"column_start":5,"column_end":84}},{"value":"/ the adapter, creating a device will panic.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15515,"byte_end":15561,"line_start":360,"line_end":360,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":532},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15747,"byte_end":15753,"line_start":364,"line_end":364,"column_start":9,"column_end":15},"name":"limits","qualname":"::DeviceDescriptor::limits","value":"Limits","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Limits that the device should support. If any limit is \"better\" than the limit exposed by\n the adapter, creating a device will panic.\n","sig":null,"attributes":[{"value":"/ Limits that the device should support. If any limit is \"better\" than the limit exposed by","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15594,"byte_end":15687,"line_start":362,"line_end":362,"column_start":5,"column_end":98}},{"value":"/ the adapter, creating a device will panic.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15692,"byte_end":15738,"line_start":363,"line_end":363,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":533},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15906,"byte_end":15923,"line_start":367,"line_end":367,"column_start":9,"column_end":26},"name":"shader_validation","qualname":"::DeviceDescriptor::shader_validation","value":"bool","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Switch shader validation on/off. This is a temporary field\n that will be removed once our validation logic is complete.\n","sig":null,"attributes":[{"value":"/ Switch shader validation on/off. This is a temporary field","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15767,"byte_end":15829,"line_start":365,"line_end":365,"column_start":5,"column_end":67}},{"value":"/ that will be removed once our validation logic is complete.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":15834,"byte_end":15897,"line_start":366,"line_end":366,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":540},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":16322,"byte_end":16333,"line_start":378,"line_end":378,"column_start":16,"column_end":27},"name":"ShaderStage","qualname":"::ShaderStage","value":"ShaderStage {  }","parent":null,"children":[{"krate":0,"index":541}],"decl_id":null,"docs":" Describes the shader stages that a binding will be visible from.","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.2.1/src/lib.rs","byte_start":7813248,"byte_end":7813257,"line_start":405,"line_end":405,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":580},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":16413,"byte_end":16417,"line_start":380,"line_end":380,"column_start":15,"column_end":19},"name":"NONE","qualname":"::ShaderStage::NONE","value":"ShaderStage","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Binding is not visible from any shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":581},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":16513,"byte_end":16519,"line_start":382,"line_end":382,"column_start":15,"column_end":21},"name":"VERTEX","qualname":"::ShaderStage::VERTEX","value":"ShaderStage","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Binding is visible from the vertex shader of a render pipeline.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":582},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":16617,"byte_end":16625,"line_start":384,"line_end":384,"column_start":15,"column_end":23},"name":"FRAGMENT","qualname":"::ShaderStage::FRAGMENT","value":"ShaderStage","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Binding is visible from the fragment shader of a render pipeline.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":583},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":16723,"byte_end":16730,"line_start":386,"line_end":386,"column_start":15,"column_end":22},"name":"COMPUTE","qualname":"::ShaderStage::COMPUTE","value":"ShaderStage","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Binding is visible from the compute shader of a compute pipeline.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":642},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17055,"byte_end":17057,"line_start":397,"line_end":397,"column_start":5,"column_end":7},"name":"D1","qualname":"::TextureViewDimension::D1","value":"TextureViewDimension::D1","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" A one dimensional texture. `texture1D` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A one dimensional texture. `texture1D` in glsl shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":16991,"byte_end":17050,"line_start":396,"line_end":396,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":644},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17127,"byte_end":17129,"line_start":399,"line_end":399,"column_start":5,"column_end":7},"name":"D2","qualname":"::TextureViewDimension::D2","value":"TextureViewDimension::D2","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" A two dimensional texture. `texture2D` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A two dimensional texture. `texture2D` in glsl shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17063,"byte_end":17122,"line_start":398,"line_end":398,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":646},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17210,"byte_end":17217,"line_start":401,"line_end":401,"column_start":5,"column_end":12},"name":"D2Array","qualname":"::TextureViewDimension::D2Array","value":"TextureViewDimension::D2Array","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" A two dimensional array texture. `texture2DArray` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A two dimensional array texture. `texture2DArray` in glsl shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17135,"byte_end":17205,"line_start":400,"line_end":400,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":648},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17281,"byte_end":17285,"line_start":403,"line_end":403,"column_start":5,"column_end":9},"name":"Cube","qualname":"::TextureViewDimension::Cube","value":"TextureViewDimension::Cube","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" A cubemap texture. `textureCube` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A cubemap texture. `textureCube` in glsl shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17223,"byte_end":17276,"line_start":402,"line_end":402,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":650},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17360,"byte_end":17369,"line_start":405,"line_end":405,"column_start":5,"column_end":14},"name":"CubeArray","qualname":"::TextureViewDimension::CubeArray","value":"TextureViewDimension::CubeArray","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" A cubemap array texture. `textureCubeArray` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A cubemap array texture. `textureCubeArray` in glsl shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17291,"byte_end":17355,"line_start":404,"line_end":404,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":652},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17441,"byte_end":17443,"line_start":407,"line_end":407,"column_start":5,"column_end":7},"name":"D3","qualname":"::TextureViewDimension::D3","value":"TextureViewDimension::D3","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" A three dimensional texture. `texture3D` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A three dimensional texture. `texture3D` in glsl shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17375,"byte_end":17436,"line_start":406,"line_end":406,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":641},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":16964,"byte_end":16984,"line_start":395,"line_end":395,"column_start":10,"column_end":30},"name":"TextureViewDimension","qualname":"::TextureViewDimension","value":"pub enum TextureViewDimension {\n\n    /// A one dimensional texture. `texture1D` in glsl shaders.\n    D1,\n\n    /// A two dimensional texture. `texture2D` in glsl shaders.\n    D2,\n\n    /// A two dimensional array texture. `texture2DArray` in glsl shaders.\n    D2Array,\n\n    /// A cubemap texture. `textureCube` in glsl shaders.\n    Cube,\n\n    /// A cubemap array texture. `textureCubeArray` in glsl shaders.\n    CubeArray,\n\n    /// A three dimensional texture. `texture3D` in glsl shaders.\n    D3,\n}","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652}],"decl_id":null,"docs":" Dimensions of a particular texture view.\n","sig":null,"attributes":[{"value":"/ Dimensions of a particular texture view.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":16745,"byte_end":16789,"line_start":390,"line_end":390,"column_start":1,"column_end":45}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":16790,"byte_end":16800,"line_start":391,"line_end":391,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":669},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17760,"byte_end":17764,"line_start":418,"line_end":418,"column_start":5,"column_end":9},"name":"Zero","qualname":"::BlendFactor::Zero","value":"BlendFactor::Zero","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":672},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17774,"byte_end":17777,"line_start":419,"line_end":419,"column_start":5,"column_end":8},"name":"One","qualname":"::BlendFactor::One","value":"BlendFactor::One","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":675},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17787,"byte_end":17795,"line_start":420,"line_end":420,"column_start":5,"column_end":13},"name":"SrcColor","qualname":"::BlendFactor::SrcColor","value":"BlendFactor::SrcColor","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":678},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17805,"byte_end":17821,"line_start":421,"line_end":421,"column_start":5,"column_end":21},"name":"OneMinusSrcColor","qualname":"::BlendFactor::OneMinusSrcColor","value":"BlendFactor::OneMinusSrcColor","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":681},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17831,"byte_end":17839,"line_start":422,"line_end":422,"column_start":5,"column_end":13},"name":"SrcAlpha","qualname":"::BlendFactor::SrcAlpha","value":"BlendFactor::SrcAlpha","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":684},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17849,"byte_end":17865,"line_start":423,"line_end":423,"column_start":5,"column_end":21},"name":"OneMinusSrcAlpha","qualname":"::BlendFactor::OneMinusSrcAlpha","value":"BlendFactor::OneMinusSrcAlpha","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":687},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17875,"byte_end":17883,"line_start":424,"line_end":424,"column_start":5,"column_end":13},"name":"DstColor","qualname":"::BlendFactor::DstColor","value":"BlendFactor::DstColor","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":690},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17893,"byte_end":17909,"line_start":425,"line_end":425,"column_start":5,"column_end":21},"name":"OneMinusDstColor","qualname":"::BlendFactor::OneMinusDstColor","value":"BlendFactor::OneMinusDstColor","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":693},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17919,"byte_end":17927,"line_start":426,"line_end":426,"column_start":5,"column_end":13},"name":"DstAlpha","qualname":"::BlendFactor::DstAlpha","value":"BlendFactor::DstAlpha","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":696},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17937,"byte_end":17953,"line_start":427,"line_end":427,"column_start":5,"column_end":21},"name":"OneMinusDstAlpha","qualname":"::BlendFactor::OneMinusDstAlpha","value":"BlendFactor::OneMinusDstAlpha","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":699},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17963,"byte_end":17980,"line_start":428,"line_end":428,"column_start":5,"column_end":22},"name":"SrcAlphaSaturated","qualname":"::BlendFactor::SrcAlphaSaturated","value":"BlendFactor::SrcAlphaSaturated","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":702},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17991,"byte_end":18001,"line_start":429,"line_end":429,"column_start":5,"column_end":15},"name":"BlendColor","qualname":"::BlendFactor::BlendColor","value":"BlendFactor::BlendColor","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":705},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18012,"byte_end":18030,"line_start":430,"line_end":430,"column_start":5,"column_end":23},"name":"OneMinusBlendColor","qualname":"::BlendFactor::OneMinusBlendColor","value":"BlendFactor::OneMinusBlendColor","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":668},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17742,"byte_end":17753,"line_start":417,"line_end":417,"column_start":10,"column_end":21},"name":"BlendFactor","qualname":"::BlendFactor","value":"pub enum BlendFactor {\n    Zero = ,\n    One = ,\n    SrcColor = ,\n    OneMinusSrcColor = ,\n    SrcAlpha = ,\n    OneMinusSrcAlpha = ,\n    DstColor = ,\n    OneMinusDstColor = ,\n    DstAlpha = ,\n    OneMinusDstAlpha = ,\n    SrcAlphaSaturated = ,\n    BlendColor = ,\n    OneMinusBlendColor = ,\n}","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":672},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":699},{"krate":0,"index":702},{"krate":0,"index":705}],"decl_id":null,"docs":" Alpha blend factor.","sig":null,"attributes":[{"value":"/ Alpha blend factor.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17448,"byte_end":17471,"line_start":410,"line_end":410,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17472,"byte_end":17475,"line_start":411,"line_end":411,"column_start":1,"column_end":4}},{"value":"/ Alpha blending is very complicated: see the OpenGL or Vulkan spec for more information.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17476,"byte_end":17567,"line_start":412,"line_end":412,"column_start":1,"column_end":92}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":17568,"byte_end":17578,"line_start":413,"line_end":413,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":723},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18358,"byte_end":18361,"line_start":441,"line_end":441,"column_start":5,"column_end":8},"name":"Add","qualname":"::BlendOperation::Add","value":"BlendOperation::Add","parent":{"krate":0,"index":722},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":726},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18371,"byte_end":18379,"line_start":442,"line_end":442,"column_start":5,"column_end":13},"name":"Subtract","qualname":"::BlendOperation::Subtract","value":"BlendOperation::Subtract","parent":{"krate":0,"index":722},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":729},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18389,"byte_end":18404,"line_start":443,"line_end":443,"column_start":5,"column_end":20},"name":"ReverseSubtract","qualname":"::BlendOperation::ReverseSubtract","value":"BlendOperation::ReverseSubtract","parent":{"krate":0,"index":722},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":732},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18414,"byte_end":18417,"line_start":444,"line_end":444,"column_start":5,"column_end":8},"name":"Min","qualname":"::BlendOperation::Min","value":"BlendOperation::Min","parent":{"krate":0,"index":722},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":735},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18427,"byte_end":18430,"line_start":445,"line_end":445,"column_start":5,"column_end":8},"name":"Max","qualname":"::BlendOperation::Max","value":"BlendOperation::Max","parent":{"krate":0,"index":722},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":722},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18337,"byte_end":18351,"line_start":440,"line_end":440,"column_start":10,"column_end":24},"name":"BlendOperation","qualname":"::BlendOperation","value":"pub enum BlendOperation {\n    Add = ,\n    Subtract = ,\n    ReverseSubtract = ,\n    Min = ,\n    Max = ,\n}","parent":null,"children":[{"krate":0,"index":723},{"krate":0,"index":726},{"krate":0,"index":729},{"krate":0,"index":732},{"krate":0,"index":735}],"decl_id":null,"docs":" Alpha blend operation.","sig":null,"attributes":[{"value":"/ Alpha blend operation.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18040,"byte_end":18066,"line_start":433,"line_end":433,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18067,"byte_end":18070,"line_start":434,"line_end":434,"column_start":1,"column_end":4}},{"value":"/ Alpha blending is very complicated: see the OpenGL or Vulkan spec for more information.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18071,"byte_end":18162,"line_start":435,"line_end":435,"column_start":1,"column_end":92}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18163,"byte_end":18173,"line_start":436,"line_end":436,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":752},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18848,"byte_end":18863,"line_start":461,"line_end":461,"column_start":12,"column_end":27},"name":"BlendDescriptor","qualname":"::BlendDescriptor","value":"BlendDescriptor { src_factor, dst_factor, operation }","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755}],"decl_id":null,"docs":" Describes the blend state of a pipeline.","sig":null,"attributes":[{"value":"/ Describes the blend state of a pipeline.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18537,"byte_end":18581,"line_start":454,"line_end":454,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18582,"byte_end":18585,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ Alpha blending is very complicated: see the OpenGL or Vulkan spec for more information.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18586,"byte_end":18677,"line_start":456,"line_end":456,"column_start":1,"column_end":92}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18678,"byte_end":18688,"line_start":457,"line_end":457,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":753},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18874,"byte_end":18884,"line_start":462,"line_end":462,"column_start":9,"column_end":19},"name":"src_factor","qualname":"::BlendDescriptor::src_factor","value":"BlendFactor","parent":{"krate":0,"index":752},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":754},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18907,"byte_end":18917,"line_start":463,"line_end":463,"column_start":9,"column_end":19},"name":"dst_factor","qualname":"::BlendDescriptor::dst_factor","value":"BlendFactor","parent":{"krate":0,"index":752},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":755},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18940,"byte_end":18949,"line_start":464,"line_end":464,"column_start":9,"column_end":18},"name":"operation","qualname":"::BlendDescriptor::operation","value":"BlendOperation","parent":{"krate":0,"index":752},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":27},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":19007,"byte_end":19014,"line_start":468,"line_end":468,"column_start":15,"column_end":22},"name":"REPLACE","qualname":"::BlendDescriptor::REPLACE","value":"Self","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":19177,"byte_end":19187,"line_start":474,"line_end":474,"column_start":12,"column_end":22},"name":"uses_color","qualname":"<BlendDescriptor>::uses_color","value":"pub fn uses_color(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":770},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":19825,"byte_end":19845,"line_start":496,"line_end":496,"column_start":12,"column_end":32},"name":"ColorStateDescriptor","qualname":"::ColorStateDescriptor","value":"ColorStateDescriptor { format, alpha_blend, color_blend, write_mask }","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774}],"decl_id":null,"docs":" Describes the color state of a render pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the color state of a render pipeline.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":19603,"byte_end":19654,"line_start":491,"line_end":491,"column_start":1,"column_end":52}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":19655,"byte_end":19665,"line_start":492,"line_end":492,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":771},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20048,"byte_end":20054,"line_start":499,"line_end":499,"column_start":9,"column_end":15},"name":"format","qualname":"::ColorStateDescriptor::format","value":"TextureFormat","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" The [`TextureFormat`] of the image that this pipeline will render to. Must match the the format\n of the corresponding color attachment in [`CommandEncoder::begin_render_pass`].\n","sig":null,"attributes":[{"value":"/ The [`TextureFormat`] of the image that this pipeline will render to. Must match the the format","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":19852,"byte_end":19951,"line_start":497,"line_end":497,"column_start":5,"column_end":104}},{"value":"/ of the corresponding color attachment in [`CommandEncoder::begin_render_pass`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":19956,"byte_end":20039,"line_start":498,"line_end":498,"column_start":5,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":772},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20138,"byte_end":20149,"line_start":501,"line_end":501,"column_start":9,"column_end":20},"name":"alpha_blend","qualname":"::ColorStateDescriptor::alpha_blend","value":"BlendDescriptor","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" The alpha blending that is used for this pipeline.\n","sig":null,"attributes":[{"value":"/ The alpha blending that is used for this pipeline.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20075,"byte_end":20129,"line_start":500,"line_end":500,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":773},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20235,"byte_end":20246,"line_start":503,"line_end":503,"column_start":9,"column_end":20},"name":"color_blend","qualname":"::ColorStateDescriptor::color_blend","value":"BlendDescriptor","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" The color blending that is used for this pipeline.\n","sig":null,"attributes":[{"value":"/ The color blending that is used for this pipeline.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20172,"byte_end":20226,"line_start":502,"line_end":502,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":774},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20350,"byte_end":20360,"line_start":505,"line_end":505,"column_start":9,"column_end":19},"name":"write_mask","qualname":"::ColorStateDescriptor::write_mask","value":"ColorWrite","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" Mask which enables/disables writes to different color/alpha channel.\n","sig":null,"attributes":[{"value":"/ Mask which enables/disables writes to different color/alpha channel.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20269,"byte_end":20341,"line_start":504,"line_end":504,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":790},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21004,"byte_end":21013,"line_start":526,"line_end":526,"column_start":5,"column_end":14},"name":"PointList","qualname":"::PrimitiveTopology::PointList","value":"PrimitiveTopology::PointList","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":" Vertex data is a list of points. Each vertex is a new point.\n","sig":null,"attributes":[{"value":"/ Vertex data is a list of points. Each vertex is a new point.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20935,"byte_end":20999,"line_start":525,"line_end":525,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":793},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21174,"byte_end":21182,"line_start":530,"line_end":530,"column_start":5,"column_end":13},"name":"LineList","qualname":"::PrimitiveTopology::LineList","value":"PrimitiveTopology::LineList","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":" Vertex data is a list of lines. Each pair of vertices composes a new line.","sig":null,"attributes":[{"value":"/ Vertex data is a list of lines. Each pair of vertices composes a new line.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21023,"byte_end":21101,"line_start":527,"line_end":527,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21106,"byte_end":21109,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ Vertices `0 1 2 3` create two lines `0 1` and `2 3`","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21114,"byte_end":21169,"line_start":529,"line_end":529,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":796},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21359,"byte_end":21368,"line_start":534,"line_end":534,"column_start":5,"column_end":14},"name":"LineStrip","qualname":"::PrimitiveTopology::LineStrip","value":"PrimitiveTopology::LineStrip","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":" Vertex data is a strip of lines. Each set of two adjacent vertices form a line.","sig":null,"attributes":[{"value":"/ Vertex data is a strip of lines. Each set of two adjacent vertices form a line.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21192,"byte_end":21275,"line_start":531,"line_end":531,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21280,"byte_end":21283,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ Vertices `0 1 2 3` create three lines `0 1`, `1 2`, and `2 3`.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21288,"byte_end":21354,"line_start":533,"line_end":533,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":799},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21550,"byte_end":21562,"line_start":538,"line_end":538,"column_start":5,"column_end":17},"name":"TriangleList","qualname":"::PrimitiveTopology::TriangleList","value":"PrimitiveTopology::TriangleList","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":" Vertex data is a list of triangles. Each set of 3 vertices composes a new triangle.","sig":null,"attributes":[{"value":"/ Vertex data is a list of triangles. Each set of 3 vertices composes a new triangle.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21378,"byte_end":21465,"line_start":535,"line_end":535,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21470,"byte_end":21473,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ Vertices `0 1 2 3 4 5` create two triangles `0 1 2` and `3 4 5`","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21478,"byte_end":21545,"line_start":537,"line_end":537,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":802},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21767,"byte_end":21780,"line_start":542,"line_end":542,"column_start":5,"column_end":18},"name":"TriangleStrip","qualname":"::PrimitiveTopology::TriangleStrip","value":"PrimitiveTopology::TriangleStrip","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":" Vertex data is a triangle strip. Each set of three adjacent vertices form a triangle.","sig":null,"attributes":[{"value":"/ Vertex data is a triangle strip. Each set of three adjacent vertices form a triangle.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21572,"byte_end":21661,"line_start":539,"line_end":539,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21666,"byte_end":21669,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ Vertices `0 1 2 3 4 5` creates four triangles `0 1 2`, `2 1 3`, `3 2 4`, and `4 3 5`","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21674,"byte_end":21762,"line_start":541,"line_end":541,"column_start":5,"column_end":93}}]},{"kind":"Enum","id":{"krate":0,"index":789},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20911,"byte_end":20928,"line_start":524,"line_end":524,"column_start":10,"column_end":27},"name":"PrimitiveTopology","qualname":"::PrimitiveTopology","value":"pub enum PrimitiveTopology {\n\n    /// Vertex data is a list of points. Each vertex is a new point.\n    PointList = ,\n\n    /// Vertex data is a list of lines. Each pair of vertices composes a new line.\n    ///\n    /// Vertices `0 1 2 3` create two lines `0 1` and `2 3`\n    LineList = ,\n\n    /// Vertex data is a strip of lines. Each set of two adjacent vertices form a line.\n    ///\n    /// Vertices `0 1 2 3` create three lines `0 1`, `1 2`, and `2 3`.\n    LineStrip = ,\n\n    /// Vertex data is a list of triangles. Each set of 3 vertices composes a new triangle.\n    ///\n    /// Vertices `0 1 2 3 4 5` create two triangles `0 1 2` and `3 4 5`\n    TriangleList = ,\n\n    /// Vertex data is a triangle strip. Each set of three adjacent vertices form a triangle.\n    ///\n    /// Vertices `0 1 2 3 4 5` creates four triangles `0 1 2`, `2 1 3`, `3 2 4`, and `4 3 5`\n    TriangleStrip = ,\n}","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":796},{"krate":0,"index":799},{"krate":0,"index":802}],"decl_id":null,"docs":" Primitive type the input mesh is composed of.\n","sig":null,"attributes":[{"value":"/ Primitive type the input mesh is composed of.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20687,"byte_end":20736,"line_start":519,"line_end":519,"column_start":1,"column_end":50}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20737,"byte_end":20747,"line_start":520,"line_end":520,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":820},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22195,"byte_end":22198,"line_start":554,"line_end":554,"column_start":5,"column_end":8},"name":"Ccw","qualname":"::FrontFace::Ccw","value":"FrontFace::Ccw","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Triangles with vertices in counter clockwise order are considered the front face.","sig":null,"attributes":[{"value":"/ Triangles with vertices in counter clockwise order are considered the front face.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22032,"byte_end":22117,"line_start":551,"line_end":551,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22122,"byte_end":22125,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ This is the default with right handed coordinate spaces.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22130,"byte_end":22190,"line_start":553,"line_end":553,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":823},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22362,"byte_end":22364,"line_start":558,"line_end":558,"column_start":5,"column_end":7},"name":"Cw","qualname":"::FrontFace::Cw","value":"FrontFace::Cw","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Triangles with vertices in clockwise order are considered the front face.","sig":null,"attributes":[{"value":"/ Triangles with vertices in clockwise order are considered the front face.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22208,"byte_end":22285,"line_start":555,"line_end":555,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22290,"byte_end":22293,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ This is the default with left handed coordinate spaces.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22298,"byte_end":22357,"line_start":557,"line_end":557,"column_start":5,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":819},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22016,"byte_end":22025,"line_start":550,"line_end":550,"column_start":10,"column_end":19},"name":"FrontFace","qualname":"::FrontFace","value":"pub enum FrontFace {\n\n    /// Triangles with vertices in counter clockwise order are considered the front face.\n    ///\n    /// This is the default with right handed coordinate spaces.\n    Ccw = ,\n\n    /// Triangles with vertices in clockwise order are considered the front face.\n    ///\n    /// This is the default with left handed coordinate spaces.\n    Cw = ,\n}","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":823}],"decl_id":null,"docs":" Winding order which classifies the \"front\" face.\n","sig":null,"attributes":[{"value":"/ Winding order which classifies the \"front\" face.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21789,"byte_end":21841,"line_start":545,"line_end":545,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":21842,"byte_end":21852,"line_start":546,"line_end":546,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":841},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22716,"byte_end":22720,"line_start":574,"line_end":574,"column_start":5,"column_end":9},"name":"None","qualname":"::CullMode::None","value":"CullMode::None","parent":{"krate":0,"index":840},"children":[],"decl_id":null,"docs":" No faces should be culled\n","sig":null,"attributes":[{"value":"/ No faces should be culled","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22682,"byte_end":22711,"line_start":573,"line_end":573,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":844},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22767,"byte_end":22772,"line_start":576,"line_end":576,"column_start":5,"column_end":10},"name":"Front","qualname":"::CullMode::Front","value":"CullMode::Front","parent":{"krate":0,"index":840},"children":[],"decl_id":null,"docs":" Front faces should be culled\n","sig":null,"attributes":[{"value":"/ Front faces should be culled","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22730,"byte_end":22762,"line_start":575,"line_end":575,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":847},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22818,"byte_end":22822,"line_start":578,"line_end":578,"column_start":5,"column_end":9},"name":"Back","qualname":"::CullMode::Back","value":"CullMode::Back","parent":{"krate":0,"index":840},"children":[],"decl_id":null,"docs":" Back faces should be culled\n","sig":null,"attributes":[{"value":"/ Back faces should be culled","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22782,"byte_end":22813,"line_start":577,"line_end":577,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":840},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22667,"byte_end":22675,"line_start":572,"line_end":572,"column_start":10,"column_end":18},"name":"CullMode","qualname":"::CullMode","value":"pub enum CullMode {\n\n    /// No faces should be culled\n    None = ,\n\n    /// Front faces should be culled\n    Front = ,\n\n    /// Back faces should be culled\n    Back = ,\n}","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":844},{"krate":0,"index":847}],"decl_id":null,"docs":" Type of faces to be culled.\n","sig":null,"attributes":[{"value":"/ Type of faces to be culled.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22461,"byte_end":22492,"line_start":567,"line_end":567,"column_start":1,"column_end":32}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22493,"byte_end":22503,"line_start":568,"line_end":568,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":864},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23151,"byte_end":23179,"line_start":592,"line_end":592,"column_start":12,"column_end":40},"name":"RasterizationStateDescriptor","qualname":"::RasterizationStateDescriptor","value":"RasterizationStateDescriptor { front_face, cull_mode, clamp_depth, depth_bias, depth_bias_slope_scale, depth_bias_clamp }","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870}],"decl_id":null,"docs":" Describes the state of the rasterizer in a render pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the state of the rasterizer in a render pipeline.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22918,"byte_end":22981,"line_start":587,"line_end":587,"column_start":1,"column_end":64}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22982,"byte_end":22992,"line_start":588,"line_end":588,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":865},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23190,"byte_end":23200,"line_start":593,"line_end":593,"column_start":9,"column_end":19},"name":"front_face","qualname":"::RasterizationStateDescriptor::front_face","value":"FrontFace","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":866},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23221,"byte_end":23230,"line_start":594,"line_end":594,"column_start":9,"column_end":18},"name":"cull_mode","qualname":"::RasterizationStateDescriptor::cull_mode","value":"CullMode","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":867},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23394,"byte_end":23405,"line_start":598,"line_end":598,"column_start":9,"column_end":20},"name":"clamp_depth","qualname":"::RasterizationStateDescriptor::clamp_depth","value":"bool","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":" If enabled polygon depth is clamped to 0-1 range instead of being clipped.","sig":null,"attributes":[{"value":"/ If enabled polygon depth is clamped to 0-1 range instead of being clipped.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23246,"byte_end":23324,"line_start":595,"line_end":595,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23329,"byte_end":23332,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ Requires `Features::DEPTH_CLAMPING` enabled.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23337,"byte_end":23385,"line_start":597,"line_end":597,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":868},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23421,"byte_end":23431,"line_start":599,"line_end":599,"column_start":9,"column_end":19},"name":"depth_bias","qualname":"::RasterizationStateDescriptor::depth_bias","value":"i32","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":869},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23446,"byte_end":23468,"line_start":600,"line_end":600,"column_start":9,"column_end":31},"name":"depth_bias_slope_scale","qualname":"::RasterizationStateDescriptor::depth_bias_slope_scale","value":"f32","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":870},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23483,"byte_end":23499,"line_start":601,"line_end":601,"column_start":9,"column_end":25},"name":"depth_bias_clamp","qualname":"::RasterizationStateDescriptor::depth_bias_clamp","value":"f32","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":882},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24037,"byte_end":24044,"line_start":614,"line_end":614,"column_start":5,"column_end":12},"name":"R8Unorm","qualname":"::TextureFormat::R8Unorm","value":"TextureFormat::R8Unorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red channel only. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23933,"byte_end":24032,"line_start":613,"line_end":613,"column_start":5,"column_end":104}}]},{"kind":"TupleVariant","id":{"krate":0,"index":885},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24162,"byte_end":24169,"line_start":616,"line_end":616,"column_start":5,"column_end":12},"name":"R8Snorm","qualname":"::TextureFormat::R8Snorm","value":"TextureFormat::R8Snorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red channel only. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24054,"byte_end":24157,"line_start":615,"line_end":615,"column_start":5,"column_end":108}}]},{"kind":"TupleVariant","id":{"krate":0,"index":888},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24252,"byte_end":24258,"line_start":618,"line_end":618,"column_start":5,"column_end":11},"name":"R8Uint","qualname":"::TextureFormat::R8Uint","value":"TextureFormat::R8Uint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red channel only. 8 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 8 bit integer per channel. Unsigned in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24179,"byte_end":24247,"line_start":617,"line_end":617,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":891},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24339,"byte_end":24345,"line_start":620,"line_end":620,"column_start":5,"column_end":11},"name":"R8Sint","qualname":"::TextureFormat::R8Sint","value":"TextureFormat::R8Sint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red channel only. 8 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 8 bit integer per channel. Signed in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24268,"byte_end":24334,"line_start":619,"line_end":619,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":894},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24459,"byte_end":24466,"line_start":624,"line_end":624,"column_start":5,"column_end":12},"name":"R16Uint","qualname":"::TextureFormat::R16Uint","value":"TextureFormat::R16Uint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red channel only. 16 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 16 bit integer per channel. Unsigned in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24385,"byte_end":24454,"line_start":623,"line_end":623,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":897},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24548,"byte_end":24555,"line_start":626,"line_end":626,"column_start":5,"column_end":12},"name":"R16Sint","qualname":"::TextureFormat::R16Sint","value":"TextureFormat::R16Sint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red channel only. 16 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 16 bit integer per channel. Signed in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24476,"byte_end":24543,"line_start":625,"line_end":625,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":900},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24634,"byte_end":24642,"line_start":628,"line_end":628,"column_start":5,"column_end":13},"name":"R16Float","qualname":"::TextureFormat::R16Float","value":"TextureFormat::R16Float","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red channel only. 16 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 16 bit float per channel. Float in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24565,"byte_end":24629,"line_start":627,"line_end":627,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":903},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24762,"byte_end":24770,"line_start":630,"line_end":630,"column_start":5,"column_end":13},"name":"Rg8Unorm","qualname":"::TextureFormat::Rg8Unorm","value":"TextureFormat::Rg8Unorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red and green channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24652,"byte_end":24757,"line_start":629,"line_end":629,"column_start":5,"column_end":110}}]},{"kind":"TupleVariant","id":{"krate":0,"index":906},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24894,"byte_end":24902,"line_start":632,"line_end":632,"column_start":5,"column_end":13},"name":"Rg8Snorm","qualname":"::TextureFormat::Rg8Snorm","value":"TextureFormat::Rg8Snorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red and green channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24780,"byte_end":24889,"line_start":631,"line_end":631,"column_start":5,"column_end":114}}]},{"kind":"TupleVariant","id":{"krate":0,"index":909},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24991,"byte_end":24998,"line_start":634,"line_end":634,"column_start":5,"column_end":12},"name":"Rg8Uint","qualname":"::TextureFormat::Rg8Uint","value":"TextureFormat::Rg8Uint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red and green channels. 8 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 8 bit integer per channel. Unsigned in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":24912,"byte_end":24986,"line_start":633,"line_end":633,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":912},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25086,"byte_end":25093,"line_start":636,"line_end":636,"column_start":5,"column_end":12},"name":"Rg8Sint","qualname":"::TextureFormat::Rg8Sint","value":"TextureFormat::Rg8Sint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red and green channel s. 8 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channel s. 8 bit integer per channel. Signed in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25008,"byte_end":25081,"line_start":635,"line_end":635,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":915},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25208,"byte_end":25215,"line_start":640,"line_end":640,"column_start":5,"column_end":12},"name":"R32Uint","qualname":"::TextureFormat::R32Uint","value":"TextureFormat::R32Uint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red channel only. 32 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 32 bit integer per channel. Unsigned in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25134,"byte_end":25203,"line_start":639,"line_end":639,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":918},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25298,"byte_end":25305,"line_start":642,"line_end":642,"column_start":5,"column_end":12},"name":"R32Sint","qualname":"::TextureFormat::R32Sint","value":"TextureFormat::R32Sint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red channel only. 32 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 32 bit integer per channel. Signed in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25226,"byte_end":25293,"line_start":641,"line_end":641,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":921},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25385,"byte_end":25393,"line_start":644,"line_end":644,"column_start":5,"column_end":13},"name":"R32Float","qualname":"::TextureFormat::R32Float","value":"TextureFormat::R32Float","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red channel only. 32 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 32 bit float per channel. Float in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25316,"byte_end":25380,"line_start":643,"line_end":643,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":924},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25484,"byte_end":25492,"line_start":646,"line_end":646,"column_start":5,"column_end":13},"name":"Rg16Uint","qualname":"::TextureFormat::Rg16Uint","value":"TextureFormat::Rg16Uint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red and green channels. 16 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 16 bit integer per channel. Unsigned in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25404,"byte_end":25479,"line_start":645,"line_end":645,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":927},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25581,"byte_end":25589,"line_start":648,"line_end":648,"column_start":5,"column_end":13},"name":"Rg16Sint","qualname":"::TextureFormat::Rg16Sint","value":"TextureFormat::Rg16Sint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red and green channels. 16 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 16 bit integer per channel. Signed in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25503,"byte_end":25576,"line_start":647,"line_end":647,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":930},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25675,"byte_end":25684,"line_start":650,"line_end":650,"column_start":5,"column_end":14},"name":"Rg16Float","qualname":"::TextureFormat::Rg16Float","value":"TextureFormat::Rg16Float","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red and green channels. 16 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 16 bit float per channel. Float in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25600,"byte_end":25670,"line_start":649,"line_end":649,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":933},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25819,"byte_end":25829,"line_start":652,"line_end":652,"column_start":5,"column_end":15},"name":"Rgba8Unorm","qualname":"::TextureFormat::Rgba8Unorm","value":"TextureFormat::Rgba8Unorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25695,"byte_end":25814,"line_start":651,"line_end":651,"column_start":5,"column_end":124}}]},{"kind":"TupleVariant","id":{"krate":0,"index":936},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25988,"byte_end":26002,"line_start":654,"line_end":654,"column_start":5,"column_end":19},"name":"Rgba8UnormSrgb","qualname":"::TextureFormat::Rgba8UnormSrgb","value":"TextureFormat::Rgba8UnormSrgb","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":25840,"byte_end":25983,"line_start":653,"line_end":653,"column_start":5,"column_end":148}}]},{"kind":"TupleVariant","id":{"krate":0,"index":939},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26141,"byte_end":26151,"line_start":656,"line_end":656,"column_start":5,"column_end":15},"name":"Rgba8Snorm","qualname":"::TextureFormat::Rgba8Snorm","value":"TextureFormat::Rgba8Snorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26013,"byte_end":26136,"line_start":655,"line_end":655,"column_start":5,"column_end":128}}]},{"kind":"TupleVariant","id":{"krate":0,"index":942},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26255,"byte_end":26264,"line_start":658,"line_end":658,"column_start":5,"column_end":14},"name":"Rgba8Uint","qualname":"::TextureFormat::Rgba8Uint","value":"TextureFormat::Rgba8Uint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 8 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 8 bit integer per channel. Unsigned in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26162,"byte_end":26250,"line_start":657,"line_end":657,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":945},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26366,"byte_end":26375,"line_start":660,"line_end":660,"column_start":5,"column_end":14},"name":"Rgba8Sint","qualname":"::TextureFormat::Rgba8Sint","value":"TextureFormat::Rgba8Sint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 8 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 8 bit integer per channel. Signed in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26275,"byte_end":26361,"line_start":659,"line_end":659,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":948},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26510,"byte_end":26520,"line_start":662,"line_end":662,"column_start":5,"column_end":15},"name":"Bgra8Unorm","qualname":"::TextureFormat::Bgra8Unorm","value":"TextureFormat::Bgra8Unorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Blue, green, red, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Blue, green, red, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26386,"byte_end":26505,"line_start":661,"line_end":661,"column_start":5,"column_end":124}}]},{"kind":"TupleVariant","id":{"krate":0,"index":951},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26679,"byte_end":26693,"line_start":664,"line_end":664,"column_start":5,"column_end":19},"name":"Bgra8UnormSrgb","qualname":"::TextureFormat::Bgra8UnormSrgb","value":"TextureFormat::Bgra8UnormSrgb","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Blue, green, red, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Blue, green, red, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26531,"byte_end":26674,"line_start":663,"line_end":663,"column_start":5,"column_end":148}}]},{"kind":"TupleVariant","id":{"krate":0,"index":954},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26917,"byte_end":26929,"line_start":668,"line_end":668,"column_start":5,"column_end":17},"name":"Rgb10a2Unorm","qualname":"::TextureFormat::Rgb10a2Unorm","value":"TextureFormat::Rgb10a2Unorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 10 bit integer for RGB channels, 2 bit integer for alpha channel. [0, 1023] ([0, 3] for alpha) converted to/from float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 10 bit integer for RGB channels, 2 bit integer for alpha channel. [0, 1023] ([0, 3] for alpha) converted to/from float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26734,"byte_end":26912,"line_start":667,"line_end":667,"column_start":5,"column_end":183}}]},{"kind":"TupleVariant","id":{"krate":0,"index":957},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27091,"byte_end":27103,"line_start":670,"line_end":670,"column_start":5,"column_end":17},"name":"Rg11b10Float","qualname":"::TextureFormat::Rg11b10Float","value":"TextureFormat::Rg11b10Float","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, and blue channels. 11 bit float with no sign bit for RG channels. 10 bit float with no sign bit for blue channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, and blue channels. 11 bit float with no sign bit for RG channels. 10 bit float with no sign bit for blue channel. Float in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":26940,"byte_end":27086,"line_start":669,"line_end":669,"column_start":5,"column_end":151}}]},{"kind":"TupleVariant","id":{"krate":0,"index":960},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27224,"byte_end":27232,"line_start":674,"line_end":674,"column_start":5,"column_end":13},"name":"Rg32Uint","qualname":"::TextureFormat::Rg32Uint","value":"TextureFormat::Rg32Uint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red and green channels. 32 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 32 bit integer per channel. Unsigned in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27144,"byte_end":27219,"line_start":673,"line_end":673,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":963},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27321,"byte_end":27329,"line_start":676,"line_end":676,"column_start":5,"column_end":13},"name":"Rg32Sint","qualname":"::TextureFormat::Rg32Sint","value":"TextureFormat::Rg32Sint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red and green channels. 32 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 32 bit integer per channel. Signed in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27243,"byte_end":27316,"line_start":675,"line_end":675,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":966},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27415,"byte_end":27424,"line_start":678,"line_end":678,"column_start":5,"column_end":14},"name":"Rg32Float","qualname":"::TextureFormat::Rg32Float","value":"TextureFormat::Rg32Float","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red and green channels. 32 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 32 bit float per channel. Float in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27340,"byte_end":27410,"line_start":677,"line_end":677,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":969},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27529,"byte_end":27539,"line_start":680,"line_end":680,"column_start":5,"column_end":15},"name":"Rgba16Uint","qualname":"::TextureFormat::Rgba16Uint","value":"TextureFormat::Rgba16Uint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 16 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 16 bit integer per channel. Unsigned in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27435,"byte_end":27524,"line_start":679,"line_end":679,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":972},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27642,"byte_end":27652,"line_start":682,"line_end":682,"column_start":5,"column_end":15},"name":"Rgba16Sint","qualname":"::TextureFormat::Rgba16Sint","value":"TextureFormat::Rgba16Sint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 16 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 16 bit integer per channel. Signed in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27550,"byte_end":27637,"line_start":681,"line_end":681,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":975},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27752,"byte_end":27763,"line_start":684,"line_end":684,"column_start":5,"column_end":16},"name":"Rgba16Float","qualname":"::TextureFormat::Rgba16Float","value":"TextureFormat::Rgba16Float","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 16 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 16 bit float per channel. Float in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27663,"byte_end":27747,"line_start":683,"line_end":683,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":978},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27899,"byte_end":27909,"line_start":688,"line_end":688,"column_start":5,"column_end":15},"name":"Rgba32Uint","qualname":"::TextureFormat::Rgba32Uint","value":"TextureFormat::Rgba32Uint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 32 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 32 bit integer per channel. Unsigned in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27805,"byte_end":27894,"line_start":687,"line_end":687,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":981},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28012,"byte_end":28022,"line_start":690,"line_end":690,"column_start":5,"column_end":15},"name":"Rgba32Sint","qualname":"::TextureFormat::Rgba32Sint","value":"TextureFormat::Rgba32Sint","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 32 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 32 bit integer per channel. Signed in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":27920,"byte_end":28007,"line_start":689,"line_end":689,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":984},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28122,"byte_end":28133,"line_start":692,"line_end":692,"column_start":5,"column_end":16},"name":"Rgba32Float","qualname":"::TextureFormat::Rgba32Float","value":"TextureFormat::Rgba32Float","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 32 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 32 bit float per channel. Float in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28033,"byte_end":28117,"line_start":691,"line_end":691,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":987},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28241,"byte_end":28253,"line_start":696,"line_end":696,"column_start":5,"column_end":17},"name":"Depth32Float","qualname":"::TextureFormat::Depth32Float","value":"TextureFormat::Depth32Float","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Special depth format with 32 bit floating point depth.\n","sig":null,"attributes":[{"value":"/ Special depth format with 32 bit floating point depth.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28178,"byte_end":28236,"line_start":695,"line_end":695,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":990},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28329,"byte_end":28340,"line_start":698,"line_end":698,"column_start":5,"column_end":16},"name":"Depth24Plus","qualname":"::TextureFormat::Depth24Plus","value":"TextureFormat::Depth24Plus","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Special depth format with at least 24 bit integer depth.\n","sig":null,"attributes":[{"value":"/ Special depth format with at least 24 bit integer depth.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28264,"byte_end":28324,"line_start":697,"line_end":697,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":993},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28451,"byte_end":28470,"line_start":700,"line_end":700,"column_start":5,"column_end":24},"name":"Depth24PlusStencil8","qualname":"::TextureFormat::Depth24PlusStencil8","value":"TextureFormat::Depth24PlusStencil8","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" Special depth/stencil format with at least 24 bit integer depth and 8 bits integer stencil.\n","sig":null,"attributes":[{"value":"/ Special depth/stencil format with at least 24 bit integer depth and 8 bits integer stencil.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28351,"byte_end":28446,"line_start":699,"line_end":699,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":996},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28900,"byte_end":28912,"line_start":709,"line_end":709,"column_start":5,"column_end":17},"name":"Bc1RgbaUnorm","qualname":"::TextureFormat::Bc1RgbaUnorm","value":"TextureFormat::Bc1RgbaUnorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha.\n [0, 64] ([0, 1] for alpha) converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28555,"byte_end":28685,"line_start":703,"line_end":703,"column_start":5,"column_end":135}},{"value":"/ [0, 64] ([0, 1] for alpha) converted to/from float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28690,"byte_end":28762,"line_start":704,"line_end":704,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28767,"byte_end":28770,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT1.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28775,"byte_end":28798,"line_start":706,"line_end":706,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28803,"byte_end":28806,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28811,"byte_end":28895,"line_start":708,"line_end":708,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":999},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29293,"byte_end":29309,"line_start":716,"line_end":716,"column_start":5,"column_end":21},"name":"Bc1RgbaUnormSrgb","qualname":"::TextureFormat::Bc1RgbaUnormSrgb","value":"TextureFormat::Bc1RgbaUnormSrgb","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha.\n Srgb-color [0, 64] ([0, 16] for alpha) converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":28923,"byte_end":29053,"line_start":710,"line_end":710,"column_start":5,"column_end":135}},{"value":"/ Srgb-color [0, 64] ([0, 16] for alpha) converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29058,"byte_end":29155,"line_start":711,"line_end":711,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29160,"byte_end":29163,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT1.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29168,"byte_end":29191,"line_start":713,"line_end":713,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29196,"byte_end":29199,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29204,"byte_end":29288,"line_start":715,"line_end":715,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1002},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29659,"byte_end":29671,"line_start":723,"line_end":723,"column_start":5,"column_end":17},"name":"Bc2RgbaUnorm","qualname":"::TextureFormat::Bc2RgbaUnorm","value":"TextureFormat::Bc2RgbaUnorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha.\n [0, 64] ([0, 16] for alpha) converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29320,"byte_end":29443,"line_start":717,"line_end":717,"column_start":5,"column_end":128}},{"value":"/ [0, 64] ([0, 16] for alpha) converted to/from float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29448,"byte_end":29521,"line_start":718,"line_end":718,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29526,"byte_end":29529,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT3.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29534,"byte_end":29557,"line_start":720,"line_end":720,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29562,"byte_end":29565,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29570,"byte_end":29654,"line_start":722,"line_end":722,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1005},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30046,"byte_end":30062,"line_start":730,"line_end":730,"column_start":5,"column_end":21},"name":"Bc2RgbaUnormSrgb","qualname":"::TextureFormat::Bc2RgbaUnormSrgb","value":"TextureFormat::Bc2RgbaUnormSrgb","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha.\n Srgb-color [0, 64] ([0, 256] for alpha) converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29682,"byte_end":29805,"line_start":724,"line_end":724,"column_start":5,"column_end":128}},{"value":"/ Srgb-color [0, 64] ([0, 256] for alpha) converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29810,"byte_end":29908,"line_start":725,"line_end":725,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29913,"byte_end":29916,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT3.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29921,"byte_end":29944,"line_start":727,"line_end":727,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29949,"byte_end":29952,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":29957,"byte_end":30041,"line_start":729,"line_end":729,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1008},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30430,"byte_end":30442,"line_start":737,"line_end":737,"column_start":5,"column_end":17},"name":"Bc3RgbaUnorm","qualname":"::TextureFormat::Bc3RgbaUnorm","value":"TextureFormat::Bc3RgbaUnorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha.\n [0, 64] ([0, 256] for alpha) converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30073,"byte_end":30213,"line_start":731,"line_end":731,"column_start":5,"column_end":145}},{"value":"/ [0, 64] ([0, 256] for alpha) converted to/from float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30218,"byte_end":30292,"line_start":732,"line_end":732,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30297,"byte_end":30300,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT5.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30305,"byte_end":30328,"line_start":734,"line_end":734,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30333,"byte_end":30336,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30341,"byte_end":30425,"line_start":736,"line_end":736,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1011},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30834,"byte_end":30850,"line_start":744,"line_end":744,"column_start":5,"column_end":21},"name":"Bc3RgbaUnormSrgb","qualname":"::TextureFormat::Bc3RgbaUnormSrgb","value":"TextureFormat::Bc3RgbaUnormSrgb","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha.\n Srgb-color [0, 64] ([0, 256] for alpha) converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30453,"byte_end":30593,"line_start":738,"line_end":738,"column_start":5,"column_end":145}},{"value":"/ Srgb-color [0, 64] ([0, 256] for alpha) converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30598,"byte_end":30696,"line_start":739,"line_end":739,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30701,"byte_end":30704,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT5.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30709,"byte_end":30732,"line_start":741,"line_end":741,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30737,"byte_end":30740,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30745,"byte_end":30829,"line_start":743,"line_end":743,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1014},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31147,"byte_end":31156,"line_start":751,"line_end":751,"column_start":5,"column_end":14},"name":"Bc4RUnorm","qualname":"::TextureFormat::Bc4RUnorm","value":"TextureFormat::Bc4RUnorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R.\n [0, 256] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30861,"byte_end":30949,"line_start":745,"line_end":745,"column_start":5,"column_end":93}},{"value":"/ [0, 256] converted to/from float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":30954,"byte_end":31008,"line_start":746,"line_end":746,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31013,"byte_end":31016,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ Also known as RGTC1.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31021,"byte_end":31045,"line_start":748,"line_end":748,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31050,"byte_end":31053,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31058,"byte_end":31142,"line_start":750,"line_end":750,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1017},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31457,"byte_end":31466,"line_start":758,"line_end":758,"column_start":5,"column_end":14},"name":"Bc4RSnorm","qualname":"::TextureFormat::Bc4RSnorm","value":"TextureFormat::Bc4RSnorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R.\n [-127, 127] converted to/from float [-1, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31167,"byte_end":31255,"line_start":752,"line_end":752,"column_start":5,"column_end":93}},{"value":"/ [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31260,"byte_end":31318,"line_start":753,"line_end":753,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31323,"byte_end":31326,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ Also known as RGTC1.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31331,"byte_end":31355,"line_start":755,"line_end":755,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31360,"byte_end":31363,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31368,"byte_end":31452,"line_start":757,"line_end":757,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1020},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31793,"byte_end":31803,"line_start":765,"line_end":765,"column_start":5,"column_end":15},"name":"Bc5RgUnorm","qualname":"::TextureFormat::Bc5RgUnorm","value":"TextureFormat::Bc5RgUnorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (16 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG.\n [0, 256] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (16 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31477,"byte_end":31595,"line_start":759,"line_end":759,"column_start":5,"column_end":123}},{"value":"/ [0, 256] converted to/from float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31600,"byte_end":31654,"line_start":760,"line_end":760,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31659,"byte_end":31662,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ Also known as RGTC2.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31667,"byte_end":31691,"line_start":762,"line_end":762,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31696,"byte_end":31699,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31704,"byte_end":31788,"line_start":764,"line_end":764,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1023},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32134,"byte_end":32144,"line_start":772,"line_end":772,"column_start":5,"column_end":15},"name":"Bc5RgSnorm","qualname":"::TextureFormat::Bc5RgSnorm","value":"TextureFormat::Bc5RgSnorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (16 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG.\n [-127, 127] converted to/from float [-1, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (16 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31814,"byte_end":31932,"line_start":766,"line_end":766,"column_start":5,"column_end":123}},{"value":"/ [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":31937,"byte_end":31995,"line_start":767,"line_end":767,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32000,"byte_end":32003,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Also known as RGTC2.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32008,"byte_end":32032,"line_start":769,"line_end":769,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32037,"byte_end":32040,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32045,"byte_end":32129,"line_start":771,"line_end":771,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1026},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32433,"byte_end":32446,"line_start":778,"line_end":778,"column_start":5,"column_end":18},"name":"Bc6hRgbUfloat","qualname":"::TextureFormat::Bc6hRgbUfloat","value":"TextureFormat::Bc6hRgbUfloat","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 16 bit unsigned float RGB. Float in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 16 bit unsigned float RGB. Float in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32155,"byte_end":32287,"line_start":773,"line_end":773,"column_start":5,"column_end":137}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32292,"byte_end":32295,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ Also known as BPTC (float).","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32300,"byte_end":32331,"line_start":775,"line_end":775,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32336,"byte_end":32339,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32344,"byte_end":32428,"line_start":777,"line_end":777,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1029},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32733,"byte_end":32746,"line_start":784,"line_end":784,"column_start":5,"column_end":18},"name":"Bc6hRgbSfloat","qualname":"::TextureFormat::Bc6hRgbSfloat","value":"TextureFormat::Bc6hRgbSfloat","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 16 bit signed float RGB. Float in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 16 bit signed float RGB. Float in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32457,"byte_end":32587,"line_start":779,"line_end":779,"column_start":5,"column_end":135}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32592,"byte_end":32595,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ Also known as BPTC (float).","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32600,"byte_end":32631,"line_start":781,"line_end":781,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32636,"byte_end":32639,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32644,"byte_end":32728,"line_start":783,"line_end":783,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1032},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33070,"byte_end":33082,"line_start":791,"line_end":791,"column_start":5,"column_end":17},"name":"Bc7RgbaUnorm","qualname":"::TextureFormat::Bc7RgbaUnorm","value":"TextureFormat::Bc7RgbaUnorm","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 8 bit integer RGBA.\n [0, 256] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 8 bit integer RGBA.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32757,"byte_end":32865,"line_start":785,"line_end":785,"column_start":5,"column_end":113}},{"value":"/ [0, 256] converted to/from float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32870,"byte_end":32924,"line_start":786,"line_end":786,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32929,"byte_end":32932,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ Also known as BPTC (unorm).","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32937,"byte_end":32968,"line_start":788,"line_end":788,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32973,"byte_end":32976,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":32981,"byte_end":33065,"line_start":790,"line_end":790,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1035},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33430,"byte_end":33446,"line_start":798,"line_end":798,"column_start":5,"column_end":21},"name":"Bc7RgbaUnormSrgb","qualname":"::TextureFormat::Bc7RgbaUnormSrgb","value":"TextureFormat::Bc7RgbaUnormSrgb","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 8 bit integer RGBA.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33093,"byte_end":33201,"line_start":792,"line_end":792,"column_start":5,"column_end":113}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33206,"byte_end":33284,"line_start":793,"line_end":793,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33289,"byte_end":33292,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ Also known as BPTC (unorm).","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33297,"byte_end":33328,"line_start":795,"line_end":795,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33333,"byte_end":33336,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33341,"byte_end":33425,"line_start":797,"line_end":797,"column_start":5,"column_end":89}}]},{"kind":"Enum","id":{"krate":0,"index":881},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23885,"byte_end":23898,"line_start":611,"line_end":611,"column_start":10,"column_end":23},"name":"TextureFormat","qualname":"::TextureFormat","value":"pub enum TextureFormat {\n\n    /// Red channel only. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n    R8Unorm = ,\n\n    /// Red channel only. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n    R8Snorm = ,\n\n    /// Red channel only. 8 bit integer per channel. Unsigned in shader.\n    R8Uint = ,\n\n    /// Red channel only. 8 bit integer per channel. Signed in shader.\n    R8Sint = ,\n\n    /// Red channel only. 16 bit integer per channel. Unsigned in shader.\n    R16Uint = ,\n\n    /// Red channel only. 16 bit integer per channel. Signed in shader.\n    R16Sint = ,\n\n    /// Red channel only. 16 bit float per channel. Float in shader.\n    R16Float = ,\n\n    /// Red and green channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n    Rg8Unorm = ,\n\n    /// Red and green channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n    Rg8Snorm = ,\n\n    /// Red and green channels. 8 bit integer per channel. Unsigned in shader.\n    Rg8Uint = ,\n\n    /// Red and green channel s. 8 bit integer per channel. Signed in shader.\n    Rg8Sint = ,\n\n    /// Red channel only. 32 bit integer per channel. Unsigned in shader.\n    R32Uint = ,\n\n    /// Red channel only. 32 bit integer per channel. Signed in shader.\n    R32Sint = ,\n\n    /// Red channel only. 32 bit float per channel. Float in shader.\n    R32Float = ,\n\n    /// Red and green channels. 16 bit integer per channel. Unsigned in shader.\n    Rg16Uint = ,\n\n    /// Red and green channels. 16 bit integer per channel. Signed in shader.\n    Rg16Sint = ,\n\n    /// Red and green channels. 16 bit float per channel. Float in shader.\n    Rg16Float = ,\n\n    /// Red, green, blue, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n    Rgba8Unorm = ,\n\n    /// Red, green, blue, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.\n    Rgba8UnormSrgb = ,\n\n    /// Red, green, blue, and alpha channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n    Rgba8Snorm = ,\n\n    /// Red, green, blue, and alpha channels. 8 bit integer per channel. Unsigned in shader.\n    Rgba8Uint = ,\n\n    /// Red, green, blue, and alpha channels. 8 bit integer per channel. Signed in shader.\n    Rgba8Sint = ,\n\n    /// Blue, green, red, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n    Bgra8Unorm = ,\n\n    /// Blue, green, red, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.\n    Bgra8UnormSrgb = ,\n\n    /// Red, green, blue, and alpha channels. 10 bit integer for RGB channels, 2 bit integer for alpha channel. [0, 1023] ([0, 3] for alpha) converted to/from float [0, 1] in shader.\n    Rgb10a2Unorm = ,\n\n    /// Red, green, and blue channels. 11 bit float with no sign bit for RG channels. 10 bit float with no sign bit for blue channel. Float in shader.\n    Rg11b10Float = ,\n\n    /// Red and green channels. 32 bit integer per channel. Unsigned in shader.\n    Rg32Uint = ,\n\n    /// Red and green channels. 32 bit integer per channel. Signed in shader.\n    Rg32Sint = ,\n\n    /// Red and green channels. 32 bit float per channel. Float in shader.\n    Rg32Float = ,\n\n    /// Red, green, blue, and alpha channels. 16 bit integer per channel. Unsigned in shader.\n    Rgba16Uint = ,\n\n    /// Red, green, blue, and alpha channels. 16 bit integer per channel. Signed in shader.\n    Rgba16Sint = ,\n\n    /// Red, green, blue, and alpha channels. 16 bit float per channel. Float in shader.\n    Rgba16Float = ,\n\n    /// Red, green, blue, and alpha channels. 32 bit integer per channel. Unsigned in shader.\n    Rgba32Uint = ,\n\n    /// Red, green, blue, and alpha channels. 32 bit integer per channel. Signed in shader.\n    Rgba32Sint = ,\n\n    /// Red, green, blue, and alpha channels. 32 bit float per channel. Float in shader.\n    Rgba32Float = ,\n\n    /// Special depth format with 32 bit floating point depth.\n    Depth32Float = ,\n\n    /// Special depth format with at least 24 bit integer depth.\n    Depth24Plus = ,\n\n    /// Special depth/stencil format with at least 24 bit integer depth and 8 bits integer stencil.\n    Depth24PlusStencil8 = ,\n\n    /// 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha.\n    /// [0, 64] ([0, 1] for alpha) converted to/from float [0, 1] in shader.\n    ///\n    /// Also known as DXT1.\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc1RgbaUnorm = ,\n\n    /// 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha.\n    /// Srgb-color [0, 64] ([0, 16] for alpha) converted to/from linear-color float [0, 1] in shader.\n    ///\n    /// Also known as DXT1.\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc1RgbaUnormSrgb = ,\n\n    /// 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha.\n    /// [0, 64] ([0, 16] for alpha) converted to/from float [0, 1] in shader.\n    ///\n    /// Also known as DXT3.\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc2RgbaUnorm = ,\n\n    /// 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha.\n    /// Srgb-color [0, 64] ([0, 256] for alpha) converted to/from linear-color float [0, 1] in shader.\n    ///\n    /// Also known as DXT3.\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc2RgbaUnormSrgb = ,\n\n    /// 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha.\n    /// [0, 64] ([0, 256] for alpha) converted to/from float [0, 1] in shader.\n    ///\n    /// Also known as DXT5.\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc3RgbaUnorm = ,\n\n    /// 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha.\n    /// Srgb-color [0, 64] ([0, 256] for alpha) converted to/from linear-color float [0, 1] in shader.\n    ///\n    /// Also known as DXT5.\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc3RgbaUnormSrgb = ,\n\n    /// 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R.\n    /// [0, 256] converted to/from float [0, 1] in shader.\n    ///\n    /// Also known as RGTC1.\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc4RUnorm = ,\n\n    /// 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R.\n    /// [-127, 127] converted to/from float [-1, 1] in shader.\n    ///\n    /// Also known as RGTC1.\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc4RSnorm = ,\n\n    /// 4x4 block compressed texture. 16 bytes per block (16 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG.\n    /// [0, 256] converted to/from float [0, 1] in shader.\n    ///\n    /// Also known as RGTC2.\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc5RgUnorm = ,\n\n    /// 4x4 block compressed texture. 16 bytes per block (16 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG.\n    /// [-127, 127] converted to/from float [-1, 1] in shader.\n    ///\n    /// Also known as RGTC2.\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc5RgSnorm = ,\n\n    /// 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 16 bit unsigned float RGB. Float in shader.\n    ///\n    /// Also known as BPTC (float).\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc6hRgbUfloat = ,\n\n    /// 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 16 bit signed float RGB. Float in shader.\n    ///\n    /// Also known as BPTC (float).\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc6hRgbSfloat = ,\n\n    /// 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 8 bit integer RGBA.\n    /// [0, 256] converted to/from float [0, 1] in shader.\n    ///\n    /// Also known as BPTC (unorm).\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc7RgbaUnorm = ,\n\n    /// 4x4 block compressed texture. 16 bytes per block (16 bit/px). Variable sized pallet. 8 bit integer RGBA.\n    /// Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.\n    ///\n    /// Also known as BPTC (unorm).\n    ///\n    /// [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.\n    Bc7RgbaUnormSrgb = ,\n}","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":885},{"krate":0,"index":888},{"krate":0,"index":891},{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":903},{"krate":0,"index":906},{"krate":0,"index":909},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":927},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":939},{"krate":0,"index":942},{"krate":0,"index":945},{"krate":0,"index":948},{"krate":0,"index":951},{"krate":0,"index":954},{"krate":0,"index":957},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":966},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":996},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1035}],"decl_id":null,"docs":" Underlying texture data format.","sig":null,"attributes":[{"value":"/ Underlying texture data format.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23509,"byte_end":23544,"line_start":604,"line_end":604,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23545,"byte_end":23548,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/ If there is a conversion in the format (such as srgb -> linear), The conversion listed is for","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23549,"byte_end":23646,"line_start":606,"line_end":606,"column_start":1,"column_end":98}},{"value":"/ loading from texture in a shader. When writing to the texture, the opposite conversion takes place.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23647,"byte_end":23750,"line_start":607,"line_end":607,"column_start":1,"column_end":104}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":23751,"byte_end":23761,"line_start":608,"line_end":608,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1052},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33703,"byte_end":33713,"line_start":806,"line_end":806,"column_start":16,"column_end":26},"name":"ColorWrite","qualname":"::ColorWrite","value":"ColorWrite {  }","parent":null,"children":[{"krate":0,"index":1053}],"decl_id":null,"docs":" Color write mask. Disabled color channels will not be written to.\n","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.2.1/src/lib.rs","byte_start":7813248,"byte_end":7813257,"line_start":405,"line_end":405,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":1094},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33773,"byte_end":33776,"line_start":808,"line_end":808,"column_start":15,"column_end":18},"name":"RED","qualname":"::ColorWrite::RED","value":"ColorWrite","parent":{"krate":0,"index":1093},"children":[],"decl_id":null,"docs":" Enable red channel writes\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1095},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33836,"byte_end":33841,"line_start":810,"line_end":810,"column_start":15,"column_end":20},"name":"GREEN","qualname":"::ColorWrite::GREEN","value":"ColorWrite","parent":{"krate":0,"index":1093},"children":[],"decl_id":null,"docs":" Enable green channel writes\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1096},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33900,"byte_end":33904,"line_start":812,"line_end":812,"column_start":15,"column_end":19},"name":"BLUE","qualname":"::ColorWrite::BLUE","value":"ColorWrite","parent":{"krate":0,"index":1093},"children":[],"decl_id":null,"docs":" Enable blue channel writes\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1097},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":33964,"byte_end":33969,"line_start":814,"line_end":814,"column_start":15,"column_end":20},"name":"ALPHA","qualname":"::ColorWrite::ALPHA","value":"ColorWrite","parent":{"krate":0,"index":1093},"children":[],"decl_id":null,"docs":" Enable alpha channel writes\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1098},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34044,"byte_end":34049,"line_start":816,"line_end":816,"column_start":15,"column_end":20},"name":"COLOR","qualname":"::ColorWrite::COLOR","value":"ColorWrite","parent":{"krate":0,"index":1093},"children":[],"decl_id":null,"docs":" Enable red, green, and blue channel writes\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1099},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34112,"byte_end":34115,"line_start":818,"line_end":818,"column_start":15,"column_end":18},"name":"ALL","qualname":"::ColorWrite::ALL","value":"ColorWrite","parent":{"krate":0,"index":1093},"children":[],"decl_id":null,"docs":" Enable writes to all channels.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1163},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34400,"byte_end":34422,"line_start":832,"line_end":832,"column_start":12,"column_end":34},"name":"StencilStateDescriptor","qualname":"::StencilStateDescriptor","value":"StencilStateDescriptor { front, back, read_mask, write_mask }","parent":null,"children":[{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34221,"byte_end":34231,"line_start":828,"line_end":828,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1164},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34458,"byte_end":34463,"line_start":834,"line_end":834,"column_start":9,"column_end":14},"name":"front","qualname":"::StencilStateDescriptor::front","value":"StencilStateFaceDescriptor","parent":{"krate":0,"index":1163},"children":[],"decl_id":null,"docs":" Front face mode.\n","sig":null,"attributes":[{"value":"/ Front face mode.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34429,"byte_end":34449,"line_start":833,"line_end":833,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1165},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34525,"byte_end":34529,"line_start":836,"line_end":836,"column_start":9,"column_end":13},"name":"back","qualname":"::StencilStateDescriptor::back","value":"StencilStateFaceDescriptor","parent":{"krate":0,"index":1163},"children":[],"decl_id":null,"docs":" Back face mode.\n","sig":null,"attributes":[{"value":"/ Back face mode.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34497,"byte_end":34516,"line_start":835,"line_end":835,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":1166},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34691,"byte_end":34700,"line_start":838,"line_end":838,"column_start":9,"column_end":18},"name":"read_mask","qualname":"::StencilStateDescriptor::read_mask","value":"u32","parent":{"krate":0,"index":1163},"children":[],"decl_id":null,"docs":" Stencil values are AND'd with this mask when reading and writing from the stencil buffer. Only low 8 bits are used.\n","sig":null,"attributes":[{"value":"/ Stencil values are AND'd with this mask when reading and writing from the stencil buffer. Only low 8 bits are used.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34563,"byte_end":34682,"line_start":837,"line_end":837,"column_start":5,"column_end":124}}]},{"kind":"Field","id":{"krate":0,"index":1167},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34825,"byte_end":34835,"line_start":840,"line_end":840,"column_start":9,"column_end":19},"name":"write_mask","qualname":"::StencilStateDescriptor::write_mask","value":"u32","parent":{"krate":0,"index":1163},"children":[],"decl_id":null,"docs":" Stencil values are AND'd with this mask when writing to the stencil buffer. Only low 8 bits are used.\n","sig":null,"attributes":[{"value":"/ Stencil values are AND'd with this mask when writing to the stencil buffer. Only low 8 bits are used.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34711,"byte_end":34816,"line_start":839,"line_end":839,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34886,"byte_end":34896,"line_start":844,"line_end":844,"column_start":12,"column_end":22},"name":"is_enabled","qualname":"<StencilStateDescriptor>::is_enabled","value":"pub fn is_enabled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35114,"byte_end":35126,"line_start":849,"line_end":849,"column_start":12,"column_end":24},"name":"is_read_only","qualname":"<StencilStateDescriptor>::is_read_only","value":"pub fn is_read_only(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35190,"byte_end":35205,"line_start":852,"line_end":852,"column_start":12,"column_end":27},"name":"needs_ref_value","qualname":"<StencilStateDescriptor>::needs_ref_value","value":"pub fn needs_ref_value(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1184},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35546,"byte_end":35573,"line_start":862,"line_end":862,"column_start":12,"column_end":39},"name":"DepthStencilStateDescriptor","qualname":"::DepthStencilStateDescriptor","value":"DepthStencilStateDescriptor { format, depth_write_enabled, depth_compare, stencil }","parent":null,"children":[{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188}],"decl_id":null,"docs":" Describes the depth/stencil state in a render pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the depth/stencil state in a render pipeline.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35316,"byte_end":35375,"line_start":857,"line_end":857,"column_start":1,"column_end":60}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35376,"byte_end":35386,"line_start":858,"line_end":858,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1185},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35766,"byte_end":35772,"line_start":865,"line_end":865,"column_start":9,"column_end":15},"name":"format","qualname":"::DepthStencilStateDescriptor::format","value":"TextureFormat","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":" Format of the depth/stencil buffer, must be special depth format. Must match the the format\n of the depth/stencil attachment in [`CommandEncoder::begin_render_pass`].\n","sig":null,"attributes":[{"value":"/ Format of the depth/stencil buffer, must be special depth format. Must match the the format","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35580,"byte_end":35675,"line_start":863,"line_end":863,"column_start":5,"column_end":100}},{"value":"/ of the depth/stencil attachment in [`CommandEncoder::begin_render_pass`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35680,"byte_end":35757,"line_start":864,"line_end":864,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":1186},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35848,"byte_end":35867,"line_start":867,"line_end":867,"column_start":9,"column_end":28},"name":"depth_write_enabled","qualname":"::DepthStencilStateDescriptor::depth_write_enabled","value":"bool","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":" If disabled, depth will not be written to.\n","sig":null,"attributes":[{"value":"/ If disabled, depth will not be written to.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35793,"byte_end":35839,"line_start":866,"line_end":866,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1187},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35959,"byte_end":35972,"line_start":869,"line_end":869,"column_start":9,"column_end":22},"name":"depth_compare","qualname":"::DepthStencilStateDescriptor::depth_compare","value":"CompareFunction","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":" Comparison function used to compare depth values in the depth test.\n","sig":null,"attributes":[{"value":"/ Comparison function used to compare depth values in the depth test.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35879,"byte_end":35950,"line_start":868,"line_end":868,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1188},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":35999,"byte_end":36006,"line_start":870,"line_end":870,"column_start":9,"column_end":16},"name":"stencil","qualname":"::DepthStencilStateDescriptor::stencil","value":"StencilStateDescriptor","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36081,"byte_end":36097,"line_start":874,"line_end":874,"column_start":12,"column_end":28},"name":"is_depth_enabled","qualname":"<DepthStencilStateDescriptor>::is_depth_enabled","value":"pub fn is_depth_enabled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36214,"byte_end":36226,"line_start":877,"line_end":877,"column_start":12,"column_end":24},"name":"is_read_only","qualname":"<DepthStencilStateDescriptor>::is_read_only","value":"pub fn is_read_only(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1204},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36598,"byte_end":36604,"line_start":889,"line_end":889,"column_start":5,"column_end":11},"name":"Uint16","qualname":"::IndexFormat::Uint16","value":"IndexFormat::Uint16","parent":{"krate":0,"index":1203},"children":[],"decl_id":null,"docs":" Indices are 16 bit unsigned integers.\n","sig":null,"attributes":[{"value":"/ Indices are 16 bit unsigned integers.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36552,"byte_end":36593,"line_start":888,"line_end":888,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1207},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36660,"byte_end":36666,"line_start":891,"line_end":891,"column_start":5,"column_end":11},"name":"Uint32","qualname":"::IndexFormat::Uint32","value":"IndexFormat::Uint32","parent":{"krate":0,"index":1203},"children":[],"decl_id":null,"docs":" Indices are 32 bit unsigned integers.\n","sig":null,"attributes":[{"value":"/ Indices are 32 bit unsigned integers.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36614,"byte_end":36655,"line_start":890,"line_end":890,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":1203},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36534,"byte_end":36545,"line_start":887,"line_end":887,"column_start":10,"column_end":21},"name":"IndexFormat","qualname":"::IndexFormat","value":"pub enum IndexFormat {\n\n    /// Indices are 16 bit unsigned integers.\n    Uint16 = ,\n\n    /// Indices are 32 bit unsigned integers.\n    Uint32 = ,\n}","parent":null,"children":[{"krate":0,"index":1204},{"krate":0,"index":1207}],"decl_id":null,"docs":" Format of indices used with pipeline.\n","sig":null,"attributes":[{"value":"/ Format of indices used with pipeline.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36318,"byte_end":36359,"line_start":882,"line_end":882,"column_start":1,"column_end":42}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36360,"byte_end":36370,"line_start":883,"line_end":883,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1225},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37052,"byte_end":37056,"line_start":907,"line_end":907,"column_start":5,"column_end":9},"name":"Keep","qualname":"::StencilOperation::Keep","value":"StencilOperation::Keep","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Keep stencil value unchanged.\n","sig":null,"attributes":[{"value":"/ Keep stencil value unchanged.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37014,"byte_end":37047,"line_start":906,"line_end":906,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1228},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37101,"byte_end":37105,"line_start":909,"line_end":909,"column_start":5,"column_end":9},"name":"Zero","qualname":"::StencilOperation::Zero","value":"StencilOperation::Zero","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Set stencil value to zero.\n","sig":null,"attributes":[{"value":"/ Set stencil value to zero.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37066,"byte_end":37096,"line_start":908,"line_end":908,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1231},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37227,"byte_end":37234,"line_start":911,"line_end":911,"column_start":5,"column_end":12},"name":"Replace","qualname":"::StencilOperation::Replace","value":"StencilOperation::Replace","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Replace stencil value with value provided in most recent call to [`RenderPass::set_stencil_reference`].\n","sig":null,"attributes":[{"value":"/ Replace stencil value with value provided in most recent call to [`RenderPass::set_stencil_reference`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37115,"byte_end":37222,"line_start":910,"line_end":910,"column_start":5,"column_end":112}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1234},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37283,"byte_end":37289,"line_start":913,"line_end":913,"column_start":5,"column_end":11},"name":"Invert","qualname":"::StencilOperation::Invert","value":"StencilOperation::Invert","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Bitwise inverts stencil value.\n","sig":null,"attributes":[{"value":"/ Bitwise inverts stencil value.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37244,"byte_end":37278,"line_start":912,"line_end":912,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1237},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37362,"byte_end":37376,"line_start":915,"line_end":915,"column_start":5,"column_end":19},"name":"IncrementClamp","qualname":"::StencilOperation::IncrementClamp","value":"StencilOperation::IncrementClamp","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Increments stencil value by one, clamping on overflow.\n","sig":null,"attributes":[{"value":"/ Increments stencil value by one, clamping on overflow.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37299,"byte_end":37357,"line_start":914,"line_end":914,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1240},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37450,"byte_end":37464,"line_start":917,"line_end":917,"column_start":5,"column_end":19},"name":"DecrementClamp","qualname":"::StencilOperation::DecrementClamp","value":"StencilOperation::DecrementClamp","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Decrements stencil value by one, clamping on underflow.\n","sig":null,"attributes":[{"value":"/ Decrements stencil value by one, clamping on underflow.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37386,"byte_end":37445,"line_start":916,"line_end":916,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1243},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37537,"byte_end":37550,"line_start":919,"line_end":919,"column_start":5,"column_end":18},"name":"IncrementWrap","qualname":"::StencilOperation::IncrementWrap","value":"StencilOperation::IncrementWrap","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Increments stencil value by one, wrapping on overflow.\n","sig":null,"attributes":[{"value":"/ Increments stencil value by one, wrapping on overflow.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37474,"byte_end":37532,"line_start":918,"line_end":918,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1246},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37624,"byte_end":37637,"line_start":921,"line_end":921,"column_start":5,"column_end":18},"name":"DecrementWrap","qualname":"::StencilOperation::DecrementWrap","value":"StencilOperation::DecrementWrap","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Decrements stencil value by one, wrapping on underflow.\n","sig":null,"attributes":[{"value":"/ Decrements stencil value by one, wrapping on underflow.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37560,"byte_end":37619,"line_start":920,"line_end":920,"column_start":5,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":1224},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36991,"byte_end":37007,"line_start":905,"line_end":905,"column_start":10,"column_end":26},"name":"StencilOperation","qualname":"::StencilOperation","value":"pub enum StencilOperation {\n\n    /// Keep stencil value unchanged.\n    Keep = ,\n\n    /// Set stencil value to zero.\n    Zero = ,\n\n    /// Replace stencil value with value provided in most recent call to [`RenderPass::set_stencil_reference`].\n    Replace = ,\n\n    /// Bitwise inverts stencil value.\n    Invert = ,\n\n    /// Increments stencil value by one, clamping on overflow.\n    IncrementClamp = ,\n\n    /// Decrements stencil value by one, clamping on underflow.\n    DecrementClamp = ,\n\n    /// Increments stencil value by one, wrapping on overflow.\n    IncrementWrap = ,\n\n    /// Decrements stencil value by one, wrapping on underflow.\n    DecrementWrap = ,\n}","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1228},{"krate":0,"index":1231},{"krate":0,"index":1234},{"krate":0,"index":1237},{"krate":0,"index":1240},{"krate":0,"index":1243},{"krate":0,"index":1246}],"decl_id":null,"docs":" Operation to perform on the stencil value.\n","sig":null,"attributes":[{"value":"/ Operation to perform on the stencil value.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36770,"byte_end":36816,"line_start":900,"line_end":900,"column_start":1,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36817,"byte_end":36827,"line_start":901,"line_end":901,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1263},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38065,"byte_end":38091,"line_start":937,"line_end":937,"column_start":12,"column_end":38},"name":"StencilStateFaceDescriptor","qualname":"::StencilStateFaceDescriptor","value":"StencilStateFaceDescriptor { compare, fail_op, depth_fail_op, pass_op }","parent":null,"children":[{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267}],"decl_id":null,"docs":" Describes stencil state in a render pipeline.","sig":null,"attributes":[{"value":"/ Describes stencil state in a render pipeline.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37749,"byte_end":37798,"line_start":930,"line_end":930,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37799,"byte_end":37802,"line_start":931,"line_end":931,"column_start":1,"column_end":4}},{"value":"/ If you are not using stencil state, set this to [`StencilStateFaceDescriptor::IGNORE`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37803,"byte_end":37894,"line_start":932,"line_end":932,"column_start":1,"column_end":92}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37895,"byte_end":37905,"line_start":933,"line_end":933,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1264},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38203,"byte_end":38210,"line_start":939,"line_end":939,"column_start":9,"column_end":16},"name":"compare","qualname":"::StencilStateFaceDescriptor::compare","value":"CompareFunction","parent":{"krate":0,"index":1263},"children":[],"decl_id":null,"docs":" Comparison function that determines if the fail_op or pass_op is used on the stencil buffer.\n","sig":null,"attributes":[{"value":"/ Comparison function that determines if the fail_op or pass_op is used on the stencil buffer.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38098,"byte_end":38194,"line_start":938,"line_end":938,"column_start":5,"column_end":101}}]},{"kind":"Field","id":{"krate":0,"index":1265},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38298,"byte_end":38305,"line_start":941,"line_end":941,"column_start":9,"column_end":16},"name":"fail_op","qualname":"::StencilStateFaceDescriptor::fail_op","value":"StencilOperation","parent":{"krate":0,"index":1263},"children":[],"decl_id":null,"docs":" Operation that is preformed when stencil test fails.\n","sig":null,"attributes":[{"value":"/ Operation that is preformed when stencil test fails.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38233,"byte_end":38289,"line_start":940,"line_end":940,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":1266},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38418,"byte_end":38431,"line_start":943,"line_end":943,"column_start":9,"column_end":22},"name":"depth_fail_op","qualname":"::StencilStateFaceDescriptor::depth_fail_op","value":"StencilOperation","parent":{"krate":0,"index":1263},"children":[],"decl_id":null,"docs":" Operation that is performed when depth test fails but stencil test succeeds.\n","sig":null,"attributes":[{"value":"/ Operation that is performed when depth test fails but stencil test succeeds.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38329,"byte_end":38409,"line_start":942,"line_end":942,"column_start":5,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":1267},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38522,"byte_end":38529,"line_start":945,"line_end":945,"column_start":9,"column_end":16},"name":"pass_op","qualname":"::StencilStateFaceDescriptor::pass_op","value":"StencilOperation","parent":{"krate":0,"index":1263},"children":[],"decl_id":null,"docs":" Operation that is performed when stencil test success.\n","sig":null,"attributes":[{"value":"/ Operation that is performed when stencil test success.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38455,"byte_end":38513,"line_start":944,"line_end":944,"column_start":5,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":51},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38600,"byte_end":38606,"line_start":949,"line_end":949,"column_start":15,"column_end":21},"name":"IGNORE","qualname":"::StencilStateFaceDescriptor::IGNORE","value":"Self","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1283},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39239,"byte_end":39244,"line_start":970,"line_end":970,"column_start":5,"column_end":10},"name":"Never","qualname":"::CompareFunction::Never","value":"CompareFunction::Never","parent":{"krate":0,"index":1282},"children":[],"decl_id":null,"docs":" Function never passes\n","sig":null,"attributes":[{"value":"/ Function never passes","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39209,"byte_end":39234,"line_start":969,"line_end":969,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1286},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39316,"byte_end":39320,"line_start":972,"line_end":972,"column_start":5,"column_end":9},"name":"Less","qualname":"::CompareFunction::Less","value":"CompareFunction::Less","parent":{"krate":0,"index":1282},"children":[],"decl_id":null,"docs":" Function passes if new value less than existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value less than existing value","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39254,"byte_end":39311,"line_start":971,"line_end":971,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1289},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39394,"byte_end":39399,"line_start":974,"line_end":974,"column_start":5,"column_end":10},"name":"Equal","qualname":"::CompareFunction::Equal","value":"CompareFunction::Equal","parent":{"krate":0,"index":1282},"children":[],"decl_id":null,"docs":" Function passes if new value is equal to existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value is equal to existing value","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39330,"byte_end":39389,"line_start":973,"line_end":973,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1292},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39486,"byte_end":39495,"line_start":976,"line_end":976,"column_start":5,"column_end":14},"name":"LessEqual","qualname":"::CompareFunction::LessEqual","value":"CompareFunction::LessEqual","parent":{"krate":0,"index":1282},"children":[],"decl_id":null,"docs":" Function passes if new value is less than or equal to existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value is less than or equal to existing value","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39409,"byte_end":39481,"line_start":975,"line_end":975,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1295},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39573,"byte_end":39580,"line_start":978,"line_end":978,"column_start":5,"column_end":12},"name":"Greater","qualname":"::CompareFunction::Greater","value":"CompareFunction::Greater","parent":{"krate":0,"index":1282},"children":[],"decl_id":null,"docs":" Function passes if new value is greater than existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value is greater than existing value","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39505,"byte_end":39568,"line_start":977,"line_end":977,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1298},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39658,"byte_end":39666,"line_start":980,"line_end":980,"column_start":5,"column_end":13},"name":"NotEqual","qualname":"::CompareFunction::NotEqual","value":"CompareFunction::NotEqual","parent":{"krate":0,"index":1282},"children":[],"decl_id":null,"docs":" Function passes if new value is not equal to existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value is not equal to existing value","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39590,"byte_end":39653,"line_start":979,"line_end":979,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1301},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39756,"byte_end":39768,"line_start":982,"line_end":982,"column_start":5,"column_end":17},"name":"GreaterEqual","qualname":"::CompareFunction::GreaterEqual","value":"CompareFunction::GreaterEqual","parent":{"krate":0,"index":1282},"children":[],"decl_id":null,"docs":" Function passes if new value is greater than or equal to existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value is greater than or equal to existing value","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39676,"byte_end":39751,"line_start":981,"line_end":981,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1304},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39809,"byte_end":39815,"line_start":984,"line_end":984,"column_start":5,"column_end":11},"name":"Always","qualname":"::CompareFunction::Always","value":"CompareFunction::Always","parent":{"krate":0,"index":1282},"children":[],"decl_id":null,"docs":" Function always passes\n","sig":null,"attributes":[{"value":"/ Function always passes","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39778,"byte_end":39804,"line_start":983,"line_end":983,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":1282},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39187,"byte_end":39202,"line_start":968,"line_end":968,"column_start":10,"column_end":25},"name":"CompareFunction","qualname":"::CompareFunction","value":"pub enum CompareFunction {\n\n    /// Function never passes\n    Never = ,\n\n    /// Function passes if new value less than existing value\n    Less = ,\n\n    /// Function passes if new value is equal to existing value\n    Equal = ,\n\n    /// Function passes if new value is less than or equal to existing value\n    LessEqual = ,\n\n    /// Function passes if new value is greater than existing value\n    Greater = ,\n\n    /// Function passes if new value is not equal to existing value\n    NotEqual = ,\n\n    /// Function passes if new value is greater than or equal to existing value\n    GreaterEqual = ,\n\n    /// Function always passes\n    Always = ,\n}","parent":null,"children":[{"krate":0,"index":1283},{"krate":0,"index":1286},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1295},{"krate":0,"index":1298},{"krate":0,"index":1301},{"krate":0,"index":1304}],"decl_id":null,"docs":" Comparison function used for depth and stencil operations.\n","sig":null,"attributes":[{"value":"/ Comparison function used for depth and stencil operations.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38950,"byte_end":39012,"line_start":963,"line_end":963,"column_start":1,"column_end":63}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39013,"byte_end":39023,"line_start":964,"line_end":964,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39858,"byte_end":39873,"line_start":988,"line_end":988,"column_start":12,"column_end":27},"name":"needs_ref_value","qualname":"<CompareFunction>::needs_ref_value","value":"pub fn needs_ref_value(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1322},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40362,"byte_end":40368,"line_start":1003,"line_end":1003,"column_start":5,"column_end":11},"name":"Vertex","qualname":"::InputStepMode::Vertex","value":"InputStepMode::Vertex","parent":{"krate":0,"index":1321},"children":[],"decl_id":null,"docs":" Input data is advanced every vertex. This is the standard value for vertex data.\n","sig":null,"attributes":[{"value":"/ Input data is advanced every vertex. This is the standard value for vertex data.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40273,"byte_end":40357,"line_start":1002,"line_end":1002,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1325},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40425,"byte_end":40433,"line_start":1005,"line_end":1005,"column_start":5,"column_end":13},"name":"Instance","qualname":"::InputStepMode::Instance","value":"InputStepMode::Instance","parent":{"krate":0,"index":1321},"children":[],"decl_id":null,"docs":" Input data is advanced every instance.\n","sig":null,"attributes":[{"value":"/ Input data is advanced every instance.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40378,"byte_end":40420,"line_start":1004,"line_end":1004,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":1321},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40253,"byte_end":40266,"line_start":1001,"line_end":1001,"column_start":10,"column_end":23},"name":"InputStepMode","qualname":"::InputStepMode","value":"pub enum InputStepMode {\n\n    /// Input data is advanced every vertex. This is the standard value for vertex data.\n    Vertex = ,\n\n    /// Input data is advanced every instance.\n    Instance = ,\n}","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1325}],"decl_id":null,"docs":" Rate that determines when vertex data is advanced.\n","sig":null,"attributes":[{"value":"/ Rate that determines when vertex data is advanced.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40024,"byte_end":40078,"line_start":996,"line_end":996,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40079,"byte_end":40089,"line_start":997,"line_end":997,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1342},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40781,"byte_end":40806,"line_start":1015,"line_end":1015,"column_start":12,"column_end":37},"name":"VertexAttributeDescriptor","qualname":"::VertexAttributeDescriptor","value":"VertexAttributeDescriptor { offset, format, shader_location }","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345}],"decl_id":null,"docs":" Vertex inputs (attributes) to shaders.","sig":null,"attributes":[{"value":"/ Vertex inputs (attributes) to shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40442,"byte_end":40484,"line_start":1008,"line_end":1008,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40485,"byte_end":40488,"line_start":1009,"line_end":1009,"column_start":1,"column_end":4}},{"value":"/ Arrays of these can be made with the [`vertex_attr_array`] macro. Vertex attributes are assumed to be tightly packed.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40489,"byte_end":40610,"line_start":1010,"line_end":1010,"column_start":1,"column_end":122}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40611,"byte_end":40621,"line_start":1011,"line_end":1011,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1343},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40863,"byte_end":40869,"line_start":1017,"line_end":1017,"column_start":9,"column_end":15},"name":"offset","qualname":"::VertexAttributeDescriptor::offset","value":"u64","parent":{"krate":0,"index":1342},"children":[],"decl_id":null,"docs":" Byte offset of the start of the input\n","sig":null,"attributes":[{"value":"/ Byte offset of the start of the input","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40813,"byte_end":40854,"line_start":1016,"line_end":1016,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":1344},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40922,"byte_end":40928,"line_start":1019,"line_end":1019,"column_start":9,"column_end":15},"name":"format","qualname":"::VertexAttributeDescriptor::format","value":"VertexFormat","parent":{"krate":0,"index":1342},"children":[],"decl_id":null,"docs":" Format of the input\n","sig":null,"attributes":[{"value":"/ Format of the input","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40890,"byte_end":40913,"line_start":1018,"line_end":1018,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1345},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41024,"byte_end":41039,"line_start":1021,"line_end":1021,"column_start":9,"column_end":24},"name":"shader_location","qualname":"::VertexAttributeDescriptor::shader_location","value":"u32","parent":{"krate":0,"index":1342},"children":[],"decl_id":null,"docs":" Location for this input. Must match the location in the shader.\n","sig":null,"attributes":[{"value":"/ Location for this input. Must match the location in the shader.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":40948,"byte_end":41015,"line_start":1020,"line_end":1020,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1361},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41356,"byte_end":41362,"line_start":1031,"line_end":1031,"column_start":5,"column_end":11},"name":"Uchar2","qualname":"::VertexFormat::Uchar2","value":"VertexFormat::Uchar2","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two unsigned bytes (u8). `uvec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two unsigned bytes (u8). `uvec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41303,"byte_end":41351,"line_start":1030,"line_end":1030,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1364},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41426,"byte_end":41432,"line_start":1033,"line_end":1033,"column_start":5,"column_end":11},"name":"Uchar4","qualname":"::VertexFormat::Uchar4","value":"VertexFormat::Uchar4","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four unsigned bytes (u8). `uvec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four unsigned bytes (u8). `uvec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41372,"byte_end":41421,"line_start":1032,"line_end":1032,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1367},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41493,"byte_end":41498,"line_start":1035,"line_end":1035,"column_start":5,"column_end":10},"name":"Char2","qualname":"::VertexFormat::Char2","value":"VertexFormat::Char2","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two signed bytes (i8). `ivec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two signed bytes (i8). `ivec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41442,"byte_end":41488,"line_start":1034,"line_end":1034,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1370},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41560,"byte_end":41565,"line_start":1037,"line_end":1037,"column_start":5,"column_end":10},"name":"Char4","qualname":"::VertexFormat::Char4","value":"VertexFormat::Char4","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four signed bytes (i8). `ivec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four signed bytes (i8). `ivec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41508,"byte_end":41555,"line_start":1036,"line_end":1036,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1373},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41662,"byte_end":41672,"line_start":1039,"line_end":1039,"column_start":5,"column_end":15},"name":"Uchar2Norm","qualname":"::VertexFormat::Uchar2Norm","value":"VertexFormat::Uchar2Norm","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two unsigned bytes (u8). [0, 255] converted to float [0, 1] `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two unsigned bytes (u8). [0, 255] converted to float [0, 1] `vec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41575,"byte_end":41657,"line_start":1038,"line_end":1038,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1376},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41770,"byte_end":41780,"line_start":1041,"line_end":1041,"column_start":5,"column_end":15},"name":"Uchar4Norm","qualname":"::VertexFormat::Uchar4Norm","value":"VertexFormat::Uchar4Norm","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four unsigned bytes (u8). [0, 255] converted to float [0, 1] `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four unsigned bytes (u8). [0, 255] converted to float [0, 1] `vec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41682,"byte_end":41765,"line_start":1040,"line_end":1040,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1379},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41879,"byte_end":41888,"line_start":1043,"line_end":1043,"column_start":5,"column_end":14},"name":"Char2Norm","qualname":"::VertexFormat::Char2Norm","value":"VertexFormat::Char2Norm","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two signed bytes (i8). [-127, 127] converted to float [-1, 1] `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two signed bytes (i8). [-127, 127] converted to float [-1, 1] `vec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41790,"byte_end":41874,"line_start":1042,"line_end":1042,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1382},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41988,"byte_end":41997,"line_start":1045,"line_end":1045,"column_start":5,"column_end":14},"name":"Char4Norm","qualname":"::VertexFormat::Char4Norm","value":"VertexFormat::Char4Norm","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four signed bytes (i8). [-127, 127] converted to float [-1, 1] `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four signed bytes (i8). [-127, 127] converted to float [-1, 1] `vec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41898,"byte_end":41983,"line_start":1044,"line_end":1044,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1385},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42062,"byte_end":42069,"line_start":1047,"line_end":1047,"column_start":5,"column_end":12},"name":"Ushort2","qualname":"::VertexFormat::Ushort2","value":"VertexFormat::Ushort2","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two unsigned shorts (u16). `uvec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two unsigned shorts (u16). `uvec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42007,"byte_end":42057,"line_start":1046,"line_end":1046,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1388},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42135,"byte_end":42142,"line_start":1049,"line_end":1049,"column_start":5,"column_end":12},"name":"Ushort4","qualname":"::VertexFormat::Ushort4","value":"VertexFormat::Ushort4","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four unsigned shorts (u16). `uvec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four unsigned shorts (u16). `uvec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42079,"byte_end":42130,"line_start":1048,"line_end":1048,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1391},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42205,"byte_end":42211,"line_start":1051,"line_end":1051,"column_start":5,"column_end":11},"name":"Short2","qualname":"::VertexFormat::Short2","value":"VertexFormat::Short2","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two signed shorts (i16). `ivec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two signed shorts (i16). `ivec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42152,"byte_end":42200,"line_start":1050,"line_end":1050,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1394},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42276,"byte_end":42282,"line_start":1053,"line_end":1053,"column_start":5,"column_end":11},"name":"Short4","qualname":"::VertexFormat::Short4","value":"VertexFormat::Short4","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four signed shorts (i16). `ivec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four signed shorts (i16). `ivec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42222,"byte_end":42271,"line_start":1052,"line_end":1052,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1397},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42384,"byte_end":42395,"line_start":1055,"line_end":1055,"column_start":5,"column_end":16},"name":"Ushort2Norm","qualname":"::VertexFormat::Ushort2Norm","value":"VertexFormat::Ushort2Norm","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two unsigned shorts (u16). [0, 65535] converted to float [0, 1] `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two unsigned shorts (u16). [0, 65535] converted to float [0, 1] `vec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42293,"byte_end":42379,"line_start":1054,"line_end":1054,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1400},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42498,"byte_end":42509,"line_start":1057,"line_end":1057,"column_start":5,"column_end":16},"name":"Ushort4Norm","qualname":"::VertexFormat::Ushort4Norm","value":"VertexFormat::Ushort4Norm","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four unsigned shorts (u16). [0, 65535] converted to float [0, 1] `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four unsigned shorts (u16). [0, 65535] converted to float [0, 1] `vec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42406,"byte_end":42493,"line_start":1056,"line_end":1056,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1403},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42615,"byte_end":42625,"line_start":1059,"line_end":1059,"column_start":5,"column_end":15},"name":"Short2Norm","qualname":"::VertexFormat::Short2Norm","value":"VertexFormat::Short2Norm","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two signed shorts (i16). [-32767, 32767] converted to float [-1, 1] `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two signed shorts (i16). [-32767, 32767] converted to float [-1, 1] `vec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42520,"byte_end":42610,"line_start":1058,"line_end":1058,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1406},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42732,"byte_end":42742,"line_start":1061,"line_end":1061,"column_start":5,"column_end":15},"name":"Short4Norm","qualname":"::VertexFormat::Short4Norm","value":"VertexFormat::Short4Norm","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four signed shorts (i16). [-32767, 32767] converted to float [-1, 1] `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four signed shorts (i16). [-32767, 32767] converted to float [-1, 1] `vec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42636,"byte_end":42727,"line_start":1060,"line_end":1060,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1409},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42823,"byte_end":42828,"line_start":1063,"line_end":1063,"column_start":5,"column_end":10},"name":"Half2","qualname":"::VertexFormat::Half2","value":"VertexFormat::Half2","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two half-precision floats (no Rust equiv). `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two half-precision floats (no Rust equiv). `vec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42753,"byte_end":42818,"line_start":1062,"line_end":1062,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1412},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42910,"byte_end":42915,"line_start":1065,"line_end":1065,"column_start":5,"column_end":10},"name":"Half4","qualname":"::VertexFormat::Half4","value":"VertexFormat::Half4","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four half-precision floats (no Rust equiv). `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four half-precision floats (no Rust equiv). `vec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42839,"byte_end":42905,"line_start":1064,"line_end":1064,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1415},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42988,"byte_end":42993,"line_start":1067,"line_end":1067,"column_start":5,"column_end":10},"name":"Float","qualname":"::VertexFormat::Float","value":"VertexFormat::Float","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" One single-precision float (f32). `float` in shaders.\n","sig":null,"attributes":[{"value":"/ One single-precision float (f32). `float` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":42926,"byte_end":42983,"line_start":1066,"line_end":1066,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1418},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43066,"byte_end":43072,"line_start":1069,"line_end":1069,"column_start":5,"column_end":11},"name":"Float2","qualname":"::VertexFormat::Float2","value":"VertexFormat::Float2","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two single-precision floats (f32). `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two single-precision floats (f32). `vec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43004,"byte_end":43061,"line_start":1068,"line_end":1068,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1421},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43147,"byte_end":43153,"line_start":1071,"line_end":1071,"column_start":5,"column_end":11},"name":"Float3","qualname":"::VertexFormat::Float3","value":"VertexFormat::Float3","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Three single-precision floats (f32). `vec3` in shaders.\n","sig":null,"attributes":[{"value":"/ Three single-precision floats (f32). `vec3` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43083,"byte_end":43142,"line_start":1070,"line_end":1070,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1424},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43227,"byte_end":43233,"line_start":1073,"line_end":1073,"column_start":5,"column_end":11},"name":"Float4","qualname":"::VertexFormat::Float4","value":"VertexFormat::Float4","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four single-precision floats (f32). `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four single-precision floats (f32). `vec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43164,"byte_end":43222,"line_start":1072,"line_end":1072,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1427},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43295,"byte_end":43299,"line_start":1075,"line_end":1075,"column_start":5,"column_end":9},"name":"Uint","qualname":"::VertexFormat::Uint","value":"VertexFormat::Uint","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" One unsigned int (u32). `uint` in shaders.\n","sig":null,"attributes":[{"value":"/ One unsigned int (u32). `uint` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43244,"byte_end":43290,"line_start":1074,"line_end":1074,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1430},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43363,"byte_end":43368,"line_start":1077,"line_end":1077,"column_start":5,"column_end":10},"name":"Uint2","qualname":"::VertexFormat::Uint2","value":"VertexFormat::Uint2","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two unsigned ints (u32). `uvec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two unsigned ints (u32). `uvec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43310,"byte_end":43358,"line_start":1076,"line_end":1076,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1433},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43434,"byte_end":43439,"line_start":1079,"line_end":1079,"column_start":5,"column_end":10},"name":"Uint3","qualname":"::VertexFormat::Uint3","value":"VertexFormat::Uint3","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Three unsigned ints (u32). `uvec3` in shaders.\n","sig":null,"attributes":[{"value":"/ Three unsigned ints (u32). `uvec3` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43379,"byte_end":43429,"line_start":1078,"line_end":1078,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1436},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43504,"byte_end":43509,"line_start":1081,"line_end":1081,"column_start":5,"column_end":10},"name":"Uint4","qualname":"::VertexFormat::Uint4","value":"VertexFormat::Uint4","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four unsigned ints (u32). `uvec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four unsigned ints (u32). `uvec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43450,"byte_end":43499,"line_start":1080,"line_end":1080,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1439},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43568,"byte_end":43571,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8},"name":"Int","qualname":"::VertexFormat::Int","value":"VertexFormat::Int","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" One signed int (i32). `int` in shaders.\n","sig":null,"attributes":[{"value":"/ One signed int (i32). `int` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43520,"byte_end":43563,"line_start":1082,"line_end":1082,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1442},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43633,"byte_end":43637,"line_start":1085,"line_end":1085,"column_start":5,"column_end":9},"name":"Int2","qualname":"::VertexFormat::Int2","value":"VertexFormat::Int2","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Two signed ints (i32). `ivec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two signed ints (i32). `ivec2` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43582,"byte_end":43628,"line_start":1084,"line_end":1084,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1445},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43701,"byte_end":43705,"line_start":1087,"line_end":1087,"column_start":5,"column_end":9},"name":"Int3","qualname":"::VertexFormat::Int3","value":"VertexFormat::Int3","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Three signed ints (i32). `ivec3` in shaders.\n","sig":null,"attributes":[{"value":"/ Three signed ints (i32). `ivec3` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43648,"byte_end":43696,"line_start":1086,"line_end":1086,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1448},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43768,"byte_end":43772,"line_start":1089,"line_end":1089,"column_start":5,"column_end":9},"name":"Int4","qualname":"::VertexFormat::Int4","value":"VertexFormat::Int4","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":" Four signed ints (i32). `ivec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four signed ints (i32). `ivec4` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43716,"byte_end":43763,"line_start":1088,"line_end":1088,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":1360},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41284,"byte_end":41296,"line_start":1029,"line_end":1029,"column_start":10,"column_end":22},"name":"VertexFormat","qualname":"::VertexFormat","value":"pub enum VertexFormat {\n\n    /// Two unsigned bytes (u8). `uvec2` in shaders.\n    Uchar2 = ,\n\n    /// Four unsigned bytes (u8). `uvec4` in shaders.\n    Uchar4 = ,\n\n    /// Two signed bytes (i8). `ivec2` in shaders.\n    Char2 = ,\n\n    /// Four signed bytes (i8). `ivec4` in shaders.\n    Char4 = ,\n\n    /// Two unsigned bytes (u8). [0, 255] converted to float [0, 1] `vec2` in shaders.\n    Uchar2Norm = ,\n\n    /// Four unsigned bytes (u8). [0, 255] converted to float [0, 1] `vec4` in shaders.\n    Uchar4Norm = ,\n\n    /// Two signed bytes (i8). [-127, 127] converted to float [-1, 1] `vec2` in shaders.\n    Char2Norm = ,\n\n    /// Four signed bytes (i8). [-127, 127] converted to float [-1, 1] `vec4` in shaders.\n    Char4Norm = ,\n\n    /// Two unsigned shorts (u16). `uvec2` in shaders.\n    Ushort2 = ,\n\n    /// Four unsigned shorts (u16). `uvec4` in shaders.\n    Ushort4 = ,\n\n    /// Two signed shorts (i16). `ivec2` in shaders.\n    Short2 = ,\n\n    /// Four signed shorts (i16). `ivec4` in shaders.\n    Short4 = ,\n\n    /// Two unsigned shorts (u16). [0, 65535] converted to float [0, 1] `vec2` in shaders.\n    Ushort2Norm = ,\n\n    /// Four unsigned shorts (u16). [0, 65535] converted to float [0, 1] `vec4` in shaders.\n    Ushort4Norm = ,\n\n    /// Two signed shorts (i16). [-32767, 32767] converted to float [-1, 1] `vec2` in shaders.\n    Short2Norm = ,\n\n    /// Four signed shorts (i16). [-32767, 32767] converted to float [-1, 1] `vec4` in shaders.\n    Short4Norm = ,\n\n    /// Two half-precision floats (no Rust equiv). `vec2` in shaders.\n    Half2 = ,\n\n    /// Four half-precision floats (no Rust equiv). `vec4` in shaders.\n    Half4 = ,\n\n    /// One single-precision float (f32). `float` in shaders.\n    Float = ,\n\n    /// Two single-precision floats (f32). `vec2` in shaders.\n    Float2 = ,\n\n    /// Three single-precision floats (f32). `vec3` in shaders.\n    Float3 = ,\n\n    /// Four single-precision floats (f32). `vec4` in shaders.\n    Float4 = ,\n\n    /// One unsigned int (u32). `uint` in shaders.\n    Uint = ,\n\n    /// Two unsigned ints (u32). `uvec2` in shaders.\n    Uint2 = ,\n\n    /// Three unsigned ints (u32). `uvec3` in shaders.\n    Uint3 = ,\n\n    /// Four unsigned ints (u32). `uvec4` in shaders.\n    Uint4 = ,\n\n    /// One signed int (i32). `int` in shaders.\n    Int = ,\n\n    /// Two signed ints (i32). `ivec2` in shaders.\n    Int2 = ,\n\n    /// Three signed ints (i32). `ivec3` in shaders.\n    Int3 = ,\n\n    /// Four signed ints (i32). `ivec4` in shaders.\n    Int4 = ,\n}","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1364},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":1373},{"krate":0,"index":1376},{"krate":0,"index":1379},{"krate":0,"index":1382},{"krate":0,"index":1385},{"krate":0,"index":1388},{"krate":0,"index":1391},{"krate":0,"index":1394},{"krate":0,"index":1397},{"krate":0,"index":1400},{"krate":0,"index":1403},{"krate":0,"index":1406},{"krate":0,"index":1409},{"krate":0,"index":1412},{"krate":0,"index":1415},{"krate":0,"index":1418},{"krate":0,"index":1421},{"krate":0,"index":1424},{"krate":0,"index":1427},{"krate":0,"index":1430},{"krate":0,"index":1433},{"krate":0,"index":1436},{"krate":0,"index":1439},{"krate":0,"index":1442},{"krate":0,"index":1445},{"krate":0,"index":1448}],"decl_id":null,"docs":" Vertex Format for a Vertex Attribute (input).\n","sig":null,"attributes":[{"value":"/ Vertex Format for a Vertex Attribute (input).","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41060,"byte_end":41109,"line_start":1024,"line_end":1024,"column_start":1,"column_end":50}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":41110,"byte_end":41120,"line_start":1025,"line_end":1025,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43813,"byte_end":43817,"line_start":1093,"line_end":1093,"column_start":12,"column_end":16},"name":"size","qualname":"<VertexFormat>::size","value":"pub fn size(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1465},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":45274,"byte_end":45285,"line_start":1133,"line_end":1133,"column_start":16,"column_end":27},"name":"BufferUsage","qualname":"::BufferUsage","value":"BufferUsage {  }","parent":null,"children":[{"krate":0,"index":1466}],"decl_id":null,"docs":" Different ways that you can use a buffer.","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.2.1/src/lib.rs","byte_start":7813248,"byte_end":7813257,"line_start":405,"line_end":405,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":1510},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":45667,"byte_end":45675,"line_start":1139,"line_end":1139,"column_start":15,"column_end":23},"name":"MAP_READ","qualname":"::BufferUsage::MAP_READ","value":"BufferUsage","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" Allow a buffer to be mapped for reading using [`Buffer::map_async`] + [`Buffer::get_mapped_range`].\n This does not include creating a buffer with [`BufferDescriptor::mapped_at_creation`] set.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1511},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":46047,"byte_end":46056,"line_start":1145,"line_end":1145,"column_start":15,"column_end":24},"name":"MAP_WRITE","qualname":"::BufferUsage::MAP_WRITE","value":"BufferUsage","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" Allow a buffer to be mapped for writing using [`Buffer::map_async`] + [`Buffer::get_mapped_range_mut`].\n This does not include creating a buffer with `mapped_at_creation` set.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1512},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":46244,"byte_end":46252,"line_start":1148,"line_end":1148,"column_start":15,"column_end":23},"name":"COPY_SRC","qualname":"::BufferUsage::COPY_SRC","value":"BufferUsage","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" Allow a buffer to be the source buffer for a [`CommandEncoder::copy_buffer_to_buffer`] or [`CommandEncoder::copy_buffer_to_texture`]\n operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1513},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":46471,"byte_end":46479,"line_start":1151,"line_end":1151,"column_start":15,"column_end":23},"name":"COPY_DST","qualname":"::BufferUsage::COPY_DST","value":"BufferUsage","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" Allow a buffer to be the destination buffer for a [`CommandEncoder::copy_buffer_to_buffer`], [`CommandEncoder::copy_texture_to_buffer`],\n or [`Queue::write_buffer`] operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1514},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":46570,"byte_end":46575,"line_start":1153,"line_end":1153,"column_start":15,"column_end":20},"name":"INDEX","qualname":"::BufferUsage::INDEX","value":"BufferUsage","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" Allow a buffer to be the index buffer in a draw operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1515},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":46668,"byte_end":46674,"line_start":1155,"line_end":1155,"column_start":15,"column_end":21},"name":"VERTEX","qualname":"::BufferUsage::VERTEX","value":"BufferUsage","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" Allow a buffer to be the vertex buffer in a draw operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1516},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":46782,"byte_end":46789,"line_start":1157,"line_end":1157,"column_start":15,"column_end":22},"name":"UNIFORM","qualname":"::BufferUsage::UNIFORM","value":"BufferUsage","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" Allow a buffer to be a [`BindingType::UniformBuffer`] inside a bind group.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1517},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":46897,"byte_end":46904,"line_start":1159,"line_end":1159,"column_start":15,"column_end":22},"name":"STORAGE","qualname":"::BufferUsage::STORAGE","value":"BufferUsage","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" Allow a buffer to be a [`BindingType::StorageBuffer`] inside a bind group.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1518},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47005,"byte_end":47013,"line_start":1161,"line_end":1161,"column_start":15,"column_end":23},"name":"INDIRECT","qualname":"::BufferUsage::INDIRECT","value":"BufferUsage","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" Allow a buffer to be the indirect buffer in an indirect draw call.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1591},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47228,"byte_end":47244,"line_start":1170,"line_end":1170,"column_start":12,"column_end":28},"name":"BufferDescriptor","qualname":"::BufferDescriptor","value":"BufferDescriptor { label, size, usage, mapped_at_creation }","parent":null,"children":[{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1596}],"decl_id":null,"docs":" Describes a [`Buffer`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Buffer`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47030,"byte_end":47057,"line_start":1165,"line_end":1165,"column_start":1,"column_end":28}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47058,"byte_end":47068,"line_start":1166,"line_end":1166,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1593},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47356,"byte_end":47361,"line_start":1172,"line_end":1172,"column_start":9,"column_end":14},"name":"label","qualname":"::BufferDescriptor::label","value":"L","parent":{"krate":0,"index":1591},"children":[],"decl_id":null,"docs":" Debug label of a buffer. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of a buffer. This will show up in graphics debuggers for easy identification.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47254,"byte_end":47347,"line_start":1171,"line_end":1171,"column_start":5,"column_end":98}}]},{"kind":"Field","id":{"krate":0,"index":1594},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47400,"byte_end":47404,"line_start":1174,"line_end":1174,"column_start":9,"column_end":13},"name":"size","qualname":"::BufferDescriptor::size","value":"u64","parent":{"krate":0,"index":1591},"children":[],"decl_id":null,"docs":" Size of a buffer.\n","sig":null,"attributes":[{"value":"/ Size of a buffer.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47370,"byte_end":47391,"line_start":1173,"line_end":1173,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":1595},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47551,"byte_end":47556,"line_start":1177,"line_end":1177,"column_start":9,"column_end":14},"name":"usage","qualname":"::BufferDescriptor::usage","value":"BufferUsage","parent":{"krate":0,"index":1591},"children":[],"decl_id":null,"docs":" Usages of a buffer. If the buffer is used in any way that isn't specified here, the operation\n will panic.\n","sig":null,"attributes":[{"value":"/ Usages of a buffer. If the buffer is used in any way that isn't specified here, the operation","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47425,"byte_end":47522,"line_start":1175,"line_end":1175,"column_start":5,"column_end":102}},{"value":"/ will panic.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47527,"byte_end":47542,"line_start":1176,"line_end":1176,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":1596},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47787,"byte_end":47805,"line_start":1180,"line_end":1180,"column_start":9,"column_end":27},"name":"mapped_at_creation","qualname":"::BufferDescriptor::mapped_at_creation","value":"bool","parent":{"krate":0,"index":1591},"children":[],"decl_id":null,"docs":" Allows a buffer to be mapped immediately after they are made. It does not have to be [`BufferUsage::MAP_READ`] or\n [`BufferUsage::MAP_WRITE`], all buffers are allowed to be mapped at creation.\n","sig":null,"attributes":[{"value":"/ Allows a buffer to be mapped immediately after they are made. It does not have to be [`BufferUsage::MAP_READ`] or","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47575,"byte_end":47692,"line_start":1178,"line_end":1178,"column_start":5,"column_end":122}},{"value":"/ [`BufferUsage::MAP_WRITE`], all buffers are allowed to be mapped at creation.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47697,"byte_end":47778,"line_start":1179,"line_end":1179,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47857,"byte_end":47866,"line_start":1184,"line_end":1184,"column_start":12,"column_end":21},"name":"map_label","qualname":"<BufferDescriptor<L>>::map_label","value":"pub fn map_label<K, impl FnOnce(&L) -> K: FnOnce(&L) ->\n                 K>(&Self, impl FnOnce(&L) -> K) -> BufferDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1618},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48232,"byte_end":48256,"line_start":1197,"line_end":1197,"column_start":12,"column_end":36},"name":"CommandEncoderDescriptor","qualname":"::CommandEncoderDescriptor","value":"CommandEncoderDescriptor { label }","parent":null,"children":[{"krate":0,"index":1620}],"decl_id":null,"docs":" Describes a [`CommandEncoder`].\n","sig":null,"attributes":[{"value":"/ Describes a [`CommandEncoder`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48129,"byte_end":48164,"line_start":1194,"line_end":1194,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48165,"byte_end":48175,"line_start":1195,"line_end":1195,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1620},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48380,"byte_end":48385,"line_start":1199,"line_end":1199,"column_start":9,"column_end":14},"name":"label","qualname":"::CommandEncoderDescriptor::label","value":"L","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Debug label for the command encoder. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label for the command encoder. This will show up in graphics debuggers for easy identification.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48266,"byte_end":48371,"line_start":1198,"line_end":1198,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48442,"byte_end":48451,"line_start":1203,"line_end":1203,"column_start":12,"column_end":21},"name":"map_label","qualname":"<CommandEncoderDescriptor<L>>::map_label","value":"pub fn map_label<K, impl FnOnce(&L) -> K: FnOnce(&L) ->\n                 K>(&Self, impl FnOnce(&L) -> K)\n-> CommandEncoderDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1643},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49316,"byte_end":49325,"line_start":1226,"line_end":1226,"column_start":5,"column_end":14},"name":"Immediate","qualname":"::PresentMode::Immediate","value":"PresentMode::Immediate","parent":{"krate":0,"index":1642},"children":[],"decl_id":null,"docs":" The presentation engine does **not** wait for a vertical blanking period and\n the request is presented immediately. This is a low-latency presentation mode,\n but visible tearing may be observed. Will fallback to `Fifo` if unavailable on the\n selected  platform and backend. Not optimal for mobile.\n","sig":null,"attributes":[{"value":"/ The presentation engine does **not** wait for a vertical blanking period and","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48989,"byte_end":49069,"line_start":1222,"line_end":1222,"column_start":5,"column_end":85}},{"value":"/ the request is presented immediately. This is a low-latency presentation mode,","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49074,"byte_end":49156,"line_start":1223,"line_end":1223,"column_start":5,"column_end":87}},{"value":"/ but visible tearing may be observed. Will fallback to `Fifo` if unavailable on the","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49161,"byte_end":49247,"line_start":1224,"line_end":1224,"column_start":5,"column_end":91}},{"value":"/ selected  platform and backend. Not optimal for mobile.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49252,"byte_end":49311,"line_start":1225,"line_end":1225,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1646},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49694,"byte_end":49701,"line_start":1231,"line_end":1231,"column_start":5,"column_end":12},"name":"Mailbox","qualname":"::PresentMode::Mailbox","value":"PresentMode::Mailbox","parent":{"krate":0,"index":1642},"children":[],"decl_id":null,"docs":" The presentation engine waits for the next vertical blanking period to update\n the current image, but frames may be submitted without delay. This is a low-latency\n presentation mode and visible tearing will **not** be observed. Will fallback to `Fifo`\n if unavailable on the selected platform and backend. Not optimal for mobile.\n","sig":null,"attributes":[{"value":"/ The presentation engine waits for the next vertical blanking period to update","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49335,"byte_end":49416,"line_start":1227,"line_end":1227,"column_start":5,"column_end":86}},{"value":"/ the current image, but frames may be submitted without delay. This is a low-latency","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49421,"byte_end":49508,"line_start":1228,"line_end":1228,"column_start":5,"column_end":92}},{"value":"/ presentation mode and visible tearing will **not** be observed. Will fallback to `Fifo`","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49513,"byte_end":49604,"line_start":1229,"line_end":1229,"column_start":5,"column_end":96}},{"value":"/ if unavailable on the selected platform and backend. Not optimal for mobile.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49609,"byte_end":49689,"line_start":1230,"line_end":1230,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1649},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49968,"byte_end":49972,"line_start":1235,"line_end":1235,"column_start":5,"column_end":9},"name":"Fifo","qualname":"::PresentMode::Fifo","value":"PresentMode::Fifo","parent":{"krate":0,"index":1642},"children":[],"decl_id":null,"docs":" The presentation engine waits for the next vertical blanking period to update\n the current image. The framerate will be capped at the display refresh rate,\n corresponding to the `VSync`. Tearing cannot be observed. Optimal for mobile.\n","sig":null,"attributes":[{"value":"/ The presentation engine waits for the next vertical blanking period to update","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49711,"byte_end":49792,"line_start":1232,"line_end":1232,"column_start":5,"column_end":86}},{"value":"/ the current image. The framerate will be capped at the display refresh rate,","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49797,"byte_end":49877,"line_start":1233,"line_end":1233,"column_start":5,"column_end":85}},{"value":"/ corresponding to the `VSync`. Tearing cannot be observed. Optimal for mobile.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":49882,"byte_end":49963,"line_start":1234,"line_end":1234,"column_start":5,"column_end":86}}]},{"kind":"Enum","id":{"krate":0,"index":1642},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48971,"byte_end":48982,"line_start":1221,"line_end":1221,"column_start":10,"column_end":21},"name":"PresentMode","qualname":"::PresentMode","value":"pub enum PresentMode {\n\n    /// The presentation engine does **not** wait for a vertical blanking period and\n    /// the request is presented immediately. This is a low-latency presentation mode,\n    /// but visible tearing may be observed. Will fallback to `Fifo` if unavailable on the\n    /// selected  platform and backend. Not optimal for mobile.\n    Immediate = ,\n\n    /// The presentation engine waits for the next vertical blanking period to update\n    /// the current image, but frames may be submitted without delay. This is a low-latency\n    /// presentation mode and visible tearing will **not** be observed. Will fallback to `Fifo`\n    /// if unavailable on the selected platform and backend. Not optimal for mobile.\n    Mailbox = ,\n\n    /// The presentation engine waits for the next vertical blanking period to update\n    /// the current image. The framerate will be capped at the display refresh rate,\n    /// corresponding to the `VSync`. Tearing cannot be observed. Optimal for mobile.\n    Fifo = ,\n}","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1649}],"decl_id":null,"docs":" Behavior of the presentation engine based on frame rate.\n","sig":null,"attributes":[{"value":"/ Behavior of the presentation engine based on frame rate.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48736,"byte_end":48796,"line_start":1216,"line_end":1216,"column_start":1,"column_end":61}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48797,"byte_end":48807,"line_start":1217,"line_end":1217,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1666},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":50345,"byte_end":50357,"line_start":1246,"line_end":1246,"column_start":16,"column_end":28},"name":"TextureUsage","qualname":"::TextureUsage","value":"TextureUsage {  }","parent":null,"children":[{"krate":0,"index":1667}],"decl_id":null,"docs":" Different ways that you can use a texture.","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.2.1/src/lib.rs","byte_start":7813248,"byte_end":7813257,"line_start":405,"line_end":405,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":1707},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":50543,"byte_end":50551,"line_start":1249,"line_end":1249,"column_start":15,"column_end":23},"name":"COPY_SRC","qualname":"::TextureUsage::COPY_SRC","value":"TextureUsage","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" Allows a texture to be the source in a [`CommandEncoder::copy_texture_to_buffer`] or\n [`CommandEncoder::copy_texture_to_texture`] operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1708},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":50768,"byte_end":50776,"line_start":1252,"line_end":1252,"column_start":15,"column_end":23},"name":"COPY_DST","qualname":"::TextureUsage::COPY_DST","value":"TextureUsage","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" Allows a texture to be the destination in a  [`CommandEncoder::copy_texture_to_buffer`],\n [`CommandEncoder::copy_texture_to_texture`], or [`Queue::write_texture`] operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1709},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":50882,"byte_end":50889,"line_start":1254,"line_end":1254,"column_start":15,"column_end":22},"name":"SAMPLED","qualname":"::TextureUsage::SAMPLED","value":"TextureUsage","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" Allows a texture to be a [`BindingType::SampledTexture`] in a bind group.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1710},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":50995,"byte_end":51002,"line_start":1256,"line_end":1256,"column_start":15,"column_end":22},"name":"STORAGE","qualname":"::TextureUsage::STORAGE","value":"TextureUsage","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" Allows a texture to be a [`BindingType::StorageTexture`] in a bind group.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1711},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51094,"byte_end":51111,"line_start":1258,"line_end":1258,"column_start":15,"column_end":32},"name":"OUTPUT_ATTACHMENT","qualname":"::TextureUsage::OUTPUT_ATTACHMENT","value":"TextureUsage","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" Allows a texture to be a output attachment of a renderpass.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1772},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51328,"byte_end":51347,"line_start":1267,"line_end":1267,"column_start":12,"column_end":31},"name":"SwapChainDescriptor","qualname":"::SwapChainDescriptor","value":"SwapChainDescriptor { usage, format, width, height, present_mode }","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777}],"decl_id":null,"docs":" Describes a [`SwapChain`].\n","sig":null,"attributes":[{"value":"/ Describes a [`SwapChain`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51127,"byte_end":51157,"line_start":1262,"line_end":1262,"column_start":1,"column_end":31}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51158,"byte_end":51168,"line_start":1263,"line_end":1263,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1773},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51441,"byte_end":51446,"line_start":1269,"line_end":1269,"column_start":9,"column_end":14},"name":"usage","qualname":"::SwapChainDescriptor::usage","value":"TextureUsage","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" The usage of the swap chain. The only supported usage is OUTPUT_ATTACHMENT\n","sig":null,"attributes":[{"value":"/ The usage of the swap chain. The only supported usage is OUTPUT_ATTACHMENT","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51354,"byte_end":51432,"line_start":1268,"line_end":1268,"column_start":5,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":1774},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51599,"byte_end":51605,"line_start":1272,"line_end":1272,"column_start":9,"column_end":15},"name":"format","qualname":"::SwapChainDescriptor::format","value":"TextureFormat","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" The texture format of the swap chain. The only formats that are guaranteed are\n `Bgra8Unorm` and `Bgra8UnormSrgb`\n","sig":null,"attributes":[{"value":"/ The texture format of the swap chain. The only formats that are guaranteed are","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51466,"byte_end":51548,"line_start":1270,"line_end":1270,"column_start":5,"column_end":87}},{"value":"/ `Bgra8Unorm` and `Bgra8UnormSrgb`","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51553,"byte_end":51590,"line_start":1271,"line_end":1271,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1775},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51701,"byte_end":51706,"line_start":1274,"line_end":1274,"column_start":9,"column_end":14},"name":"width","qualname":"::SwapChainDescriptor::width","value":"u32","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Width of the swap chain. Must be the same size as the surface.\n","sig":null,"attributes":[{"value":"/ Width of the swap chain. Must be the same size as the surface.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51626,"byte_end":51692,"line_start":1273,"line_end":1273,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1776},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51793,"byte_end":51799,"line_start":1276,"line_end":1276,"column_start":9,"column_end":15},"name":"height","qualname":"::SwapChainDescriptor::height","value":"u32","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Height of the swap chain. Must be the same size as the surface.\n","sig":null,"attributes":[{"value":"/ Height of the swap chain. Must be the same size as the surface.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51717,"byte_end":51784,"line_start":1275,"line_end":1275,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":1777},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51971,"byte_end":51983,"line_start":1279,"line_end":1279,"column_start":9,"column_end":21},"name":"present_mode","qualname":"::SwapChainDescriptor::present_mode","value":"PresentMode","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":" Presentation mode of the swap chain. FIFO is the only guaranteed to be supported, though\n other formats will automatically fall back to FIFO.\n","sig":null,"attributes":[{"value":"/ Presentation mode of the swap chain. FIFO is the only guaranteed to be supported, though","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51810,"byte_end":51902,"line_start":1277,"line_end":1277,"column_start":5,"column_end":97}},{"value":"/ other formats will automatically fall back to FIFO.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":51907,"byte_end":51962,"line_start":1278,"line_end":1278,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1793},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52104,"byte_end":52108,"line_start":1286,"line_end":1286,"column_start":5,"column_end":9},"name":"Good","qualname":"::SwapChainStatus::Good","value":"SwapChainStatus::Good","parent":{"krate":0,"index":1792},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1795},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52114,"byte_end":52124,"line_start":1287,"line_end":1287,"column_start":5,"column_end":15},"name":"Suboptimal","qualname":"::SwapChainStatus::Suboptimal","value":"SwapChainStatus::Suboptimal","parent":{"krate":0,"index":1792},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1797},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52130,"byte_end":52137,"line_start":1288,"line_end":1288,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::SwapChainStatus::Timeout","value":"SwapChainStatus::Timeout","parent":{"krate":0,"index":1792},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1799},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52143,"byte_end":52151,"line_start":1289,"line_end":1289,"column_start":5,"column_end":13},"name":"Outdated","qualname":"::SwapChainStatus::Outdated","value":"SwapChainStatus::Outdated","parent":{"krate":0,"index":1792},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1801},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52157,"byte_end":52161,"line_start":1290,"line_end":1290,"column_start":5,"column_end":9},"name":"Lost","qualname":"::SwapChainStatus::Lost","value":"SwapChainStatus::Lost","parent":{"krate":0,"index":1792},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1792},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52082,"byte_end":52097,"line_start":1285,"line_end":1285,"column_start":10,"column_end":25},"name":"SwapChainStatus","qualname":"::SwapChainStatus","value":"pub enum SwapChainStatus { Good, Suboptimal, Timeout, Outdated, Lost, }","parent":null,"children":[{"krate":0,"index":1793},{"krate":0,"index":1795},{"krate":0,"index":1797},{"krate":0,"index":1799},{"krate":0,"index":1801}],"decl_id":null,"docs":" Status of the recieved swapchain image.\n","sig":null,"attributes":[{"value":"/ Status of the recieved swapchain image.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52001,"byte_end":52044,"line_start":1282,"line_end":1282,"column_start":1,"column_end":44}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52045,"byte_end":52055,"line_start":1283,"line_end":1283,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1805},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52425,"byte_end":52430,"line_start":1299,"line_end":1299,"column_start":12,"column_end":17},"name":"Color","qualname":"::Color","value":"Color { r, g, b, a }","parent":null,"children":[{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809}],"decl_id":null,"docs":" RGBA double precision color.","sig":null,"attributes":[{"value":"/ RGBA double precision color.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52166,"byte_end":52198,"line_start":1293,"line_end":1293,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52199,"byte_end":52202,"line_start":1294,"line_end":1294,"column_start":1,"column_end":4}},{"value":"/ This is not to be used as a generic color type, only for specific wgpu interfaces.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52203,"byte_end":52289,"line_start":1295,"line_end":1295,"column_start":1,"column_end":87}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52290,"byte_end":52300,"line_start":1296,"line_end":1296,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1806},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52441,"byte_end":52442,"line_start":1300,"line_end":1300,"column_start":9,"column_end":10},"name":"r","qualname":"::Color::r","value":"f64","parent":{"krate":0,"index":1805},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1807},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52457,"byte_end":52458,"line_start":1301,"line_end":1301,"column_start":9,"column_end":10},"name":"g","qualname":"::Color::g","value":"f64","parent":{"krate":0,"index":1805},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1808},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52473,"byte_end":52474,"line_start":1302,"line_end":1302,"column_start":9,"column_end":10},"name":"b","qualname":"::Color::b","value":"f64","parent":{"krate":0,"index":1805},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1809},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52489,"byte_end":52490,"line_start":1303,"line_end":1303,"column_start":9,"column_end":10},"name":"a","qualname":"::Color::a","value":"f64","parent":{"krate":0,"index":1805},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":72},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52527,"byte_end":52538,"line_start":1307,"line_end":1307,"column_start":15,"column_end":26},"name":"TRANSPARENT","qualname":"::Color::TRANSPARENT","value":"Self","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":73},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52640,"byte_end":52645,"line_start":1313,"line_end":1313,"column_start":15,"column_end":20},"name":"BLACK","qualname":"::Color::BLACK","value":"Self","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":74},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52747,"byte_end":52752,"line_start":1319,"line_end":1319,"column_start":15,"column_end":20},"name":"WHITE","qualname":"::Color::WHITE","value":"Self","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":75},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52854,"byte_end":52857,"line_start":1325,"line_end":1325,"column_start":15,"column_end":18},"name":"RED","qualname":"::Color::RED","value":"Self","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":76},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52959,"byte_end":52964,"line_start":1331,"line_end":1331,"column_start":15,"column_end":20},"name":"GREEN","qualname":"::Color::GREEN","value":"Self","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":77},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53066,"byte_end":53070,"line_start":1337,"line_end":1337,"column_start":15,"column_end":19},"name":"BLUE","qualname":"::Color::BLUE","value":"Self","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1822},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53410,"byte_end":53412,"line_start":1352,"line_end":1352,"column_start":5,"column_end":7},"name":"D1","qualname":"::TextureDimension::D1","value":"TextureDimension::D1","parent":{"krate":0,"index":1821},"children":[],"decl_id":null,"docs":" 1D texture\n","sig":null,"attributes":[{"value":"/ 1D texture","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53391,"byte_end":53405,"line_start":1351,"line_end":1351,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1824},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53437,"byte_end":53439,"line_start":1354,"line_end":1354,"column_start":5,"column_end":7},"name":"D2","qualname":"::TextureDimension::D2","value":"TextureDimension::D2","parent":{"krate":0,"index":1821},"children":[],"decl_id":null,"docs":" 2D texture\n","sig":null,"attributes":[{"value":"/ 2D texture","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53418,"byte_end":53432,"line_start":1353,"line_end":1353,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1826},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53464,"byte_end":53466,"line_start":1356,"line_end":1356,"column_start":5,"column_end":7},"name":"D3","qualname":"::TextureDimension::D3","value":"TextureDimension::D3","parent":{"krate":0,"index":1821},"children":[],"decl_id":null,"docs":" 3D texture\n","sig":null,"attributes":[{"value":"/ 3D texture","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53445,"byte_end":53459,"line_start":1355,"line_end":1355,"column_start":5,"column_end":19}}]},{"kind":"Enum","id":{"krate":0,"index":1821},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53368,"byte_end":53384,"line_start":1350,"line_end":1350,"column_start":10,"column_end":26},"name":"TextureDimension","qualname":"::TextureDimension","value":"pub enum TextureDimension {\n\n    /// 1D texture\n    D1,\n\n    /// 2D texture\n    D2,\n\n    /// 3D texture\n    D3,\n}","parent":null,"children":[{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826}],"decl_id":null,"docs":" Dimensionality of a texture.\n","sig":null,"attributes":[{"value":"/ Dimensionality of a texture.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53161,"byte_end":53193,"line_start":1345,"line_end":1345,"column_start":1,"column_end":33}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53194,"byte_end":53204,"line_start":1346,"line_end":1346,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1842},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53687,"byte_end":53695,"line_start":1364,"line_end":1364,"column_start":12,"column_end":20},"name":"Origin3d","qualname":"::Origin3d","value":"Origin3d { x, y, z }","parent":null,"children":[{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1845}],"decl_id":null,"docs":" Origin of a copy to/from a texture.\n","sig":null,"attributes":[{"value":"/ Origin of a copy to/from a texture.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53471,"byte_end":53510,"line_start":1359,"line_end":1359,"column_start":1,"column_end":40}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53511,"byte_end":53521,"line_start":1360,"line_end":1360,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1843},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53706,"byte_end":53707,"line_start":1365,"line_end":1365,"column_start":9,"column_end":10},"name":"x","qualname":"::Origin3d::x","value":"u32","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1844},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53722,"byte_end":53723,"line_start":1366,"line_end":1366,"column_start":9,"column_end":10},"name":"y","qualname":"::Origin3d::y","value":"u32","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1845},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53738,"byte_end":53739,"line_start":1367,"line_end":1367,"column_start":9,"column_end":10},"name":"z","qualname":"::Origin3d::z","value":"u32","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":79},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53779,"byte_end":53783,"line_start":1371,"line_end":1371,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::Origin3d::ZERO","value":"Self","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1861},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54132,"byte_end":54140,"line_start":1385,"line_end":1385,"column_start":12,"column_end":20},"name":"Extent3d","qualname":"::Extent3d","value":"Extent3d { width, height, depth }","parent":null,"children":[{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1864}],"decl_id":null,"docs":" Extent of a texture related operation.\n","sig":null,"attributes":[{"value":"/ Extent of a texture related operation.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53913,"byte_end":53955,"line_start":1380,"line_end":1380,"column_start":1,"column_end":43}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53956,"byte_end":53966,"line_start":1381,"line_end":1381,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1862},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54151,"byte_end":54156,"line_start":1386,"line_end":1386,"column_start":9,"column_end":14},"name":"width","qualname":"::Extent3d::width","value":"u32","parent":{"krate":0,"index":1861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1863},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54171,"byte_end":54177,"line_start":1387,"line_end":1387,"column_start":9,"column_end":15},"name":"height","qualname":"::Extent3d::height","value":"u32","parent":{"krate":0,"index":1861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1864},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54192,"byte_end":54197,"line_start":1388,"line_end":1388,"column_start":9,"column_end":14},"name":"depth","qualname":"::Extent3d::depth","value":"u32","parent":{"krate":0,"index":1861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1880},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54566,"byte_end":54583,"line_start":1406,"line_end":1406,"column_start":12,"column_end":29},"name":"TextureDescriptor","qualname":"::TextureDescriptor","value":"TextureDescriptor { label, size, mip_level_count, sample_count, dimension, format, usage }","parent":null,"children":[{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1888}],"decl_id":null,"docs":" Describes a [`Texture`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Texture`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54367,"byte_end":54395,"line_start":1401,"line_end":1401,"column_start":1,"column_end":29}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54396,"byte_end":54406,"line_start":1402,"line_end":1402,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1882},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54698,"byte_end":54703,"line_start":1408,"line_end":1408,"column_start":9,"column_end":14},"name":"label","qualname":"::TextureDescriptor::label","value":"L","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" Debug label of the texture. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the texture. This will show up in graphics debuggers for easy identification.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54593,"byte_end":54689,"line_start":1407,"line_end":1407,"column_start":5,"column_end":101}}]},{"kind":"Field","id":{"krate":0,"index":1883},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54878,"byte_end":54882,"line_start":1411,"line_end":1411,"column_start":9,"column_end":13},"name":"size","qualname":"::TextureDescriptor::size","value":"Extent3d","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" Size of the texture. For a regular 1D/2D texture, the unused sizes will be 1. For 2DArray textures, Z is the\n number of 2D textures in that array.\n","sig":null,"attributes":[{"value":"/ Size of the texture. For a regular 1D/2D texture, the unused sizes will be 1. For 2DArray textures, Z is the","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54712,"byte_end":54824,"line_start":1409,"line_end":1409,"column_start":5,"column_end":117}},{"value":"/ number of 2D textures in that array.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54829,"byte_end":54869,"line_start":1410,"line_end":1410,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":1884},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54982,"byte_end":54997,"line_start":1413,"line_end":1413,"column_start":9,"column_end":24},"name":"mip_level_count","qualname":"::TextureDescriptor::mip_level_count","value":"u32","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" Mip count of texture. For a texture with no extra mips, this must be 1.\n","sig":null,"attributes":[{"value":"/ Mip count of texture. For a texture with no extra mips, this must be 1.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54898,"byte_end":54973,"line_start":1412,"line_end":1412,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":1885},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55140,"byte_end":55152,"line_start":1415,"line_end":1415,"column_start":9,"column_end":21},"name":"sample_count","qualname":"::TextureDescriptor::sample_count","value":"u32","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" Sample count of texture. If this is not 1, texture must have [`BindingType::SampledTexture::multisampled`] set to true.\n","sig":null,"attributes":[{"value":"/ Sample count of texture. If this is not 1, texture must have [`BindingType::SampledTexture::multisampled`] set to true.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55008,"byte_end":55131,"line_start":1414,"line_end":1414,"column_start":5,"column_end":128}}]},{"kind":"Field","id":{"krate":0,"index":1886},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55202,"byte_end":55211,"line_start":1417,"line_end":1417,"column_start":9,"column_end":18},"name":"dimension","qualname":"::TextureDescriptor::dimension","value":"TextureDimension","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" Dimensions of the texture.\n","sig":null,"attributes":[{"value":"/ Dimensions of the texture.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55163,"byte_end":55193,"line_start":1416,"line_end":1416,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":1887},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55270,"byte_end":55276,"line_start":1419,"line_end":1419,"column_start":9,"column_end":15},"name":"format","qualname":"::TextureDescriptor::format","value":"TextureFormat","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" Format of the texture.\n","sig":null,"attributes":[{"value":"/ Format of the texture.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55235,"byte_end":55261,"line_start":1418,"line_end":1418,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1888},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55389,"byte_end":55394,"line_start":1421,"line_end":1421,"column_start":9,"column_end":14},"name":"usage","qualname":"::TextureDescriptor::usage","value":"TextureUsage","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" Allowed usages of the texture. If used in other ways, the operation will panic.\n","sig":null,"attributes":[{"value":"/ Allowed usages of the texture. If used in other ways, the operation will panic.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55297,"byte_end":55380,"line_start":1420,"line_end":1420,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55455,"byte_end":55464,"line_start":1425,"line_end":1425,"column_start":12,"column_end":21},"name":"map_label","qualname":"<TextureDescriptor<L>>::map_label","value":"pub fn map_label<K, impl FnOnce(&L) -> K: FnOnce(&L) ->\n                 K>(&Self, impl FnOnce(&L) -> K) -> TextureDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1911},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56105,"byte_end":56108,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8},"name":"All","qualname":"::TextureAspect::All","value":"TextureAspect::All","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Depth, Stencil, and Color.\n","sig":null,"attributes":[{"value":"/ Depth, Stencil, and Color.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56070,"byte_end":56100,"line_start":1444,"line_end":1444,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1913},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56131,"byte_end":56142,"line_start":1447,"line_end":1447,"column_start":5,"column_end":16},"name":"StencilOnly","qualname":"::TextureAspect::StencilOnly","value":"TextureAspect::StencilOnly","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Stencil.\n","sig":null,"attributes":[{"value":"/ Stencil.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56114,"byte_end":56126,"line_start":1446,"line_end":1446,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1915},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56163,"byte_end":56172,"line_start":1449,"line_end":1449,"column_start":5,"column_end":14},"name":"DepthOnly","qualname":"::TextureAspect::DepthOnly","value":"TextureAspect::DepthOnly","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Depth.\n","sig":null,"attributes":[{"value":"/ Depth.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56148,"byte_end":56158,"line_start":1448,"line_end":1448,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":1910},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56050,"byte_end":56063,"line_start":1443,"line_end":1443,"column_start":10,"column_end":23},"name":"TextureAspect","qualname":"::TextureAspect","value":"pub enum TextureAspect {\n\n    /// Depth, Stencil, and Color.\n    All,\n\n    /// Stencil.\n    StencilOnly,\n\n    /// Depth.\n    DepthOnly,\n}","parent":null,"children":[{"krate":0,"index":1911},{"krate":0,"index":1913},{"krate":0,"index":1915}],"decl_id":null,"docs":" Kind of data the texture holds.\n","sig":null,"attributes":[{"value":"/ Kind of data the texture holds.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55840,"byte_end":55875,"line_start":1438,"line_end":1438,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55876,"byte_end":55886,"line_start":1439,"line_end":1439,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1932},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56621,"byte_end":56632,"line_start":1468,"line_end":1468,"column_start":5,"column_end":16},"name":"ClampToEdge","qualname":"::AddressMode::ClampToEdge","value":"AddressMode::ClampToEdge","parent":{"krate":0,"index":1931},"children":[],"decl_id":null,"docs":" Clamp the value to the edge of the texture","sig":null,"attributes":[{"value":"/ Clamp the value to the edge of the texture","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56520,"byte_end":56566,"line_start":1464,"line_end":1464,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56571,"byte_end":56574,"line_start":1465,"line_end":1465,"column_start":5,"column_end":8}},{"value":"/ -0.25 -> 0.0","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56579,"byte_end":56595,"line_start":1466,"line_end":1466,"column_start":5,"column_end":21}},{"value":"/ 1.25  -> 1.0","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56600,"byte_end":56616,"line_start":1467,"line_end":1467,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1935},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56740,"byte_end":56746,"line_start":1473,"line_end":1473,"column_start":5,"column_end":11},"name":"Repeat","qualname":"::AddressMode::Repeat","value":"AddressMode::Repeat","parent":{"krate":0,"index":1931},"children":[],"decl_id":null,"docs":" Repeat the texture in a tiling fashion","sig":null,"attributes":[{"value":"/ Repeat the texture in a tiling fashion","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56642,"byte_end":56684,"line_start":1469,"line_end":1469,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56689,"byte_end":56692,"line_start":1470,"line_end":1470,"column_start":5,"column_end":8}},{"value":"/ -0.25 -> 0.75","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56697,"byte_end":56714,"line_start":1471,"line_end":1471,"column_start":5,"column_end":22}},{"value":"/ 1.25 -> 0.25","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56719,"byte_end":56735,"line_start":1472,"line_end":1472,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1938},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56861,"byte_end":56873,"line_start":1478,"line_end":1478,"column_start":5,"column_end":17},"name":"MirrorRepeat","qualname":"::AddressMode::MirrorRepeat","value":"AddressMode::MirrorRepeat","parent":{"krate":0,"index":1931},"children":[],"decl_id":null,"docs":" Repeat the texture, mirroring it every repeat","sig":null,"attributes":[{"value":"/ Repeat the texture, mirroring it every repeat","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56756,"byte_end":56805,"line_start":1474,"line_end":1474,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56810,"byte_end":56813,"line_start":1475,"line_end":1475,"column_start":5,"column_end":8}},{"value":"/ -0.25 -> 0.25","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56818,"byte_end":56835,"line_start":1476,"line_end":1476,"column_start":5,"column_end":22}},{"value":"/ 1.25 -> 0.75","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56840,"byte_end":56856,"line_start":1477,"line_end":1477,"column_start":5,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":1931},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56502,"byte_end":56513,"line_start":1463,"line_end":1463,"column_start":10,"column_end":21},"name":"AddressMode","qualname":"::AddressMode","value":"pub enum AddressMode {\n\n    /// Clamp the value to the edge of the texture\n    ///\n    /// -0.25 -> 0.0\n    /// 1.25  -> 1.0\n    ClampToEdge = ,\n\n    /// Repeat the texture in a tiling fashion\n    ///\n    /// -0.25 -> 0.75\n    /// 1.25 -> 0.25\n    Repeat = ,\n\n    /// Repeat the texture, mirroring it every repeat\n    ///\n    /// -0.25 -> 0.25\n    /// 1.25 -> 0.75\n    MirrorRepeat = ,\n}","parent":null,"children":[{"krate":0,"index":1932},{"krate":0,"index":1935},{"krate":0,"index":1938}],"decl_id":null,"docs":" How edges should be handled in texture addressing.\n","sig":null,"attributes":[{"value":"/ How edges should be handled in texture addressing.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56273,"byte_end":56327,"line_start":1458,"line_end":1458,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56328,"byte_end":56338,"line_start":1459,"line_end":1459,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1956},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57334,"byte_end":57341,"line_start":1496,"line_end":1496,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::FilterMode::Nearest","value":"FilterMode::Nearest","parent":{"krate":0,"index":1955},"children":[],"decl_id":null,"docs":" Nearest neighbor sampling.","sig":null,"attributes":[{"value":"/ Nearest neighbor sampling.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57225,"byte_end":57255,"line_start":1493,"line_end":1493,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57260,"byte_end":57263,"line_start":1494,"line_end":1494,"column_start":5,"column_end":8}},{"value":"/ This creates a pixelated effect when used as a mag filter","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57268,"byte_end":57329,"line_start":1495,"line_end":1495,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1959},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57461,"byte_end":57467,"line_start":1500,"line_end":1500,"column_start":5,"column_end":11},"name":"Linear","qualname":"::FilterMode::Linear","value":"FilterMode::Linear","parent":{"krate":0,"index":1955},"children":[],"decl_id":null,"docs":" Linear Interpolation","sig":null,"attributes":[{"value":"/ Linear Interpolation","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57351,"byte_end":57375,"line_start":1497,"line_end":1497,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57380,"byte_end":57383,"line_start":1498,"line_end":1498,"column_start":5,"column_end":8}},{"value":"/ This makes textures smooth but blurry when used as a mag filter.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57388,"byte_end":57456,"line_start":1499,"line_end":1499,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":1955},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57208,"byte_end":57218,"line_start":1492,"line_end":1492,"column_start":10,"column_end":20},"name":"FilterMode","qualname":"::FilterMode","value":"pub enum FilterMode {\n\n    /// Nearest neighbor sampling.\n    ///\n    /// This creates a pixelated effect when used as a mag filter\n    Nearest = ,\n\n    /// Linear Interpolation\n    ///\n    /// This makes textures smooth but blurry when used as a mag filter.\n    Linear = ,\n}","parent":null,"children":[{"krate":0,"index":1956},{"krate":0,"index":1959}],"decl_id":null,"docs":" Texel mixing mode when sampling between texels.\n","sig":null,"attributes":[{"value":"/ Texel mixing mode when sampling between texels.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56982,"byte_end":57033,"line_start":1487,"line_end":1487,"column_start":1,"column_end":52}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57034,"byte_end":57044,"line_start":1488,"line_end":1488,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1976},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57792,"byte_end":57809,"line_start":1513,"line_end":1513,"column_start":12,"column_end":29},"name":"PushConstantRange","qualname":"::PushConstantRange","value":"PushConstantRange { stages, range }","parent":null,"children":[{"krate":0,"index":1977},{"krate":0,"index":1978}],"decl_id":null,"docs":" A range of push constant memory to pass to a shader stage.\n","sig":null,"attributes":[{"value":"/ A range of push constant memory to pass to a shader stage.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57570,"byte_end":57632,"line_start":1509,"line_end":1509,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":1977},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57976,"byte_end":57982,"line_start":1516,"line_end":1516,"column_start":9,"column_end":15},"name":"stages","qualname":"::PushConstantRange::stages","value":"ShaderStage","parent":{"krate":0,"index":1976},"children":[],"decl_id":null,"docs":" Stage push constant range is visible from. Each stage can only be served by at most one range.\n One range can serve multiple stages however.\n","sig":null,"attributes":[{"value":"/ Stage push constant range is visible from. Each stage can only be served by at most one range.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57816,"byte_end":57914,"line_start":1514,"line_end":1514,"column_start":5,"column_end":103}},{"value":"/ One range can serve multiple stages however.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57919,"byte_end":57967,"line_start":1515,"line_end":1515,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":1978},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58168,"byte_end":58173,"line_start":1519,"line_end":1519,"column_start":9,"column_end":14},"name":"range","qualname":"::PushConstantRange::range","value":"std::ops::Range<u32>","parent":{"krate":0,"index":1976},"children":[],"decl_id":null,"docs":" Range in push constant memory to use for the stage. Must be less than [`Limits::max_push_constant_size`].\n Start and end must be aligned to the 4s.\n","sig":null,"attributes":[{"value":"/ Range in push constant memory to use for the stage. Must be less than [`Limits::max_push_constant_size`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58001,"byte_end":58110,"line_start":1517,"line_end":1517,"column_start":5,"column_end":114}},{"value":"/ Start and end must be aligned to the 4s.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58115,"byte_end":58159,"line_start":1518,"line_end":1518,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1993},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58404,"byte_end":58427,"line_start":1527,"line_end":1527,"column_start":12,"column_end":35},"name":"CommandBufferDescriptor","qualname":"::CommandBufferDescriptor","value":"CommandBufferDescriptor { label }","parent":null,"children":[{"krate":0,"index":1995}],"decl_id":null,"docs":" Describes a [`CommandBuffer`].\n","sig":null,"attributes":[{"value":"/ Describes a [`CommandBuffer`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58190,"byte_end":58224,"line_start":1522,"line_end":1522,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58225,"byte_end":58235,"line_start":1523,"line_end":1523,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1995},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58441,"byte_end":58446,"line_start":1528,"line_end":1528,"column_start":9,"column_end":14},"name":"label","qualname":"::CommandBufferDescriptor::label","value":"L","parent":{"krate":0,"index":1993},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58502,"byte_end":58511,"line_start":1532,"line_end":1532,"column_start":12,"column_end":21},"name":"map_label","qualname":"<CommandBufferDescriptor<L>>::map_label","value":"pub fn map_label<K, impl FnOnce(&L) -> K: FnOnce(&L) ->\n                 K>(&Self, impl FnOnce(&L) -> K) -> CommandBufferDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2020},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58875,"byte_end":58897,"line_start":1544,"line_end":1544,"column_start":12,"column_end":34},"name":"RenderBundleDescriptor","qualname":"::RenderBundleDescriptor","value":"RenderBundleDescriptor { label }","parent":null,"children":[{"krate":0,"index":2022}],"decl_id":null,"docs":" Describes a [`RenderBundle`].\n","sig":null,"attributes":[{"value":"/ Describes a [`RenderBundle`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58671,"byte_end":58704,"line_start":1539,"line_end":1539,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58705,"byte_end":58715,"line_start":1540,"line_end":1540,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2022},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59026,"byte_end":59031,"line_start":1546,"line_end":1546,"column_start":9,"column_end":14},"name":"label","qualname":"::RenderBundleDescriptor::label","value":"L","parent":{"krate":0,"index":2020},"children":[],"decl_id":null,"docs":" Debug label of the render bundle encoder. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the render bundle encoder. This will show up in graphics debuggers for easy identification.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58907,"byte_end":59017,"line_start":1545,"line_end":1545,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59086,"byte_end":59095,"line_start":1550,"line_end":1550,"column_start":12,"column_end":21},"name":"map_label","qualname":"<RenderBundleDescriptor<L>>::map_label","value":"pub fn map_label<K, impl FnOnce(&L) -> K: FnOnce(&L) ->\n                 K>(&Self, impl FnOnce(&L) -> K) -> RenderBundleDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2045},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59814,"byte_end":59819,"line_start":1572,"line_end":1572,"column_start":5,"column_end":10},"name":"Float","qualname":"::TextureComponentType::Float","value":"TextureComponentType::Float","parent":{"krate":0,"index":2044},"children":[],"decl_id":null,"docs":" They see it as a floating point number `texture1D`, `texture2D` etc\n","sig":null,"attributes":[{"value":"/ They see it as a floating point number `texture1D`, `texture2D` etc","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59738,"byte_end":59809,"line_start":1571,"line_end":1571,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2047},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59896,"byte_end":59900,"line_start":1574,"line_end":1574,"column_start":5,"column_end":9},"name":"Sint","qualname":"::TextureComponentType::Sint","value":"TextureComponentType::Sint","parent":{"krate":0,"index":2044},"children":[],"decl_id":null,"docs":" They see it as a signed integer `itexture1D`, `itexture2D` etc\n","sig":null,"attributes":[{"value":"/ They see it as a signed integer `itexture1D`, `itexture2D` etc","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59825,"byte_end":59891,"line_start":1573,"line_end":1573,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2049},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59979,"byte_end":59983,"line_start":1576,"line_end":1576,"column_start":5,"column_end":9},"name":"Uint","qualname":"::TextureComponentType::Uint","value":"TextureComponentType::Uint","parent":{"krate":0,"index":2044},"children":[],"decl_id":null,"docs":" They see it as a unsigned integer `utexture1D`, `utexture2D` etc\n","sig":null,"attributes":[{"value":"/ They see it as a unsigned integer `utexture1D`, `utexture2D` etc","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59906,"byte_end":59974,"line_start":1575,"line_end":1575,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":2044},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59711,"byte_end":59731,"line_start":1570,"line_end":1570,"column_start":10,"column_end":30},"name":"TextureComponentType","qualname":"::TextureComponentType","value":"pub enum TextureComponentType {\n\n    /// They see it as a floating point number `texture1D`, `texture2D` etc\n    Float,\n\n    /// They see it as a signed integer `itexture1D`, `itexture2D` etc\n    Sint,\n\n    /// They see it as a unsigned integer `utexture1D`, `utexture2D` etc\n    Uint,\n}","parent":null,"children":[{"krate":0,"index":2045},{"krate":0,"index":2047},{"krate":0,"index":2049}],"decl_id":null,"docs":" Type of data shaders will read from a texture.","sig":null,"attributes":[{"value":"/ Type of data shaders will read from a texture.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59374,"byte_end":59424,"line_start":1563,"line_end":1563,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59425,"byte_end":59428,"line_start":1564,"line_end":1564,"column_start":1,"column_end":4}},{"value":"/ Only relevant for [`BindingType::SampledTexture`] bindings. See [`TextureFormat`] for more information.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59429,"byte_end":59536,"line_start":1565,"line_end":1565,"column_start":1,"column_end":108}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59537,"byte_end":59547,"line_start":1566,"line_end":1566,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2065},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":62477,"byte_end":62494,"line_start":1645,"line_end":1645,"column_start":12,"column_end":29},"name":"TextureDataLayout","qualname":"::TextureDataLayout","value":"TextureDataLayout { offset, bytes_per_row, rows_per_image }","parent":null,"children":[{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2068}],"decl_id":null,"docs":" Layout of a texture in a buffer's memory.\n","sig":null,"attributes":[{"value":"/ Layout of a texture in a buffer's memory.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":62259,"byte_end":62304,"line_start":1640,"line_end":1640,"column_start":1,"column_end":46}},{"value":"repr(C)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":62305,"byte_end":62315,"line_start":1641,"line_end":1641,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2066},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":62660,"byte_end":62666,"line_start":1648,"line_end":1648,"column_start":9,"column_end":15},"name":"offset","qualname":"::TextureDataLayout::offset","value":"u64","parent":{"krate":0,"index":2065},"children":[],"decl_id":null,"docs":" Offset into the buffer that is the start of the texture. Must be a multiple of texture block size.\n For non-compressed textures, this is 1.\n","sig":null,"attributes":[{"value":"/ Offset into the buffer that is the start of the texture. Must be a multiple of texture block size.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":62501,"byte_end":62603,"line_start":1646,"line_end":1646,"column_start":5,"column_end":107}},{"value":"/ For non-compressed textures, this is 1.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":62608,"byte_end":62651,"line_start":1647,"line_end":1647,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":2067},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63194,"byte_end":63207,"line_start":1656,"line_end":1656,"column_start":9,"column_end":22},"name":"bytes_per_row","qualname":"::TextureDataLayout::bytes_per_row","value":"u32","parent":{"krate":0,"index":2065},"children":[],"decl_id":null,"docs":" Bytes per \"row\" of the image. This represents one row of pixels in the x direction. Compressed\n textures include multiple rows of pixels in each \"row\". May be 0 for 1D texture copies.","sig":null,"attributes":[{"value":"/ Bytes per \"row\" of the image. This represents one row of pixels in the x direction. Compressed","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":62687,"byte_end":62785,"line_start":1649,"line_end":1649,"column_start":5,"column_end":103}},{"value":"/ textures include multiple rows of pixels in each \"row\". May be 0 for 1D texture copies.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":62790,"byte_end":62881,"line_start":1650,"line_end":1650,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":62886,"byte_end":62889,"line_start":1651,"line_end":1651,"column_start":5,"column_end":8}},{"value":"/ Must be a multiple of 256 for [`CommandEncoder::copy_buffer_to_texture`] and [`CommandEncoder::copy_texture_to_buffer`].","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":62894,"byte_end":63018,"line_start":1652,"line_end":1652,"column_start":5,"column_end":129}},{"value":"/ [`Queue::write_texture`] does not have this requirement.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63023,"byte_end":63083,"line_start":1653,"line_end":1653,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63088,"byte_end":63091,"line_start":1654,"line_end":1654,"column_start":5,"column_end":8}},{"value":"/ Must be a multiple of the texture block size. For non-compressed textures, this is 1.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63096,"byte_end":63185,"line_start":1655,"line_end":1655,"column_start":5,"column_end":94}}]},{"kind":"Field","id":{"krate":0,"index":2068},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63416,"byte_end":63430,"line_start":1661,"line_end":1661,"column_start":9,"column_end":23},"name":"rows_per_image","qualname":"::TextureDataLayout::rows_per_image","value":"u32","parent":{"krate":0,"index":2065},"children":[],"decl_id":null,"docs":" Rows that make up a single \"image\". Each \"image\" is one layer in the z direction of a 3D image. May be larger\n than `copy_size.y`.","sig":null,"attributes":[{"value":"/ Rows that make up a single \"image\". Each \"image\" is one layer in the z direction of a 3D image. May be larger","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63218,"byte_end":63331,"line_start":1657,"line_end":1657,"column_start":5,"column_end":118}},{"value":"/ than `copy_size.y`.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63336,"byte_end":63359,"line_start":1658,"line_end":1658,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63364,"byte_end":63367,"line_start":1659,"line_end":1659,"column_start":5,"column_end":8}},{"value":"/ May be 0 for 2D texture copies.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63372,"byte_end":63407,"line_start":1660,"line_end":1660,"column_start":5,"column_end":40}}]},{"kind":"StructVariant","id":{"krate":0,"index":2076},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63974,"byte_end":63987,"line_start":1681,"line_end":1681,"column_start":5,"column_end":18},"name":"UniformBuffer","qualname":"::BindingType::UniformBuffer","value":"BindingType::UniformBuffer { dynamic, min_binding_size }","parent":{"krate":0,"index":2075},"children":[],"decl_id":null,"docs":" A buffer for uniform values.","sig":null,"attributes":[{"value":"/ A buffer for uniform values.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63733,"byte_end":63765,"line_start":1671,"line_end":1671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63770,"byte_end":63773,"line_start":1672,"line_end":1672,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63778,"byte_end":63802,"line_start":1673,"line_end":1673,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63807,"byte_end":63824,"line_start":1674,"line_end":1674,"column_start":5,"column_end":22}},{"value":"/ layout(std140, binding = 0)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63829,"byte_end":63860,"line_start":1675,"line_end":1675,"column_start":5,"column_end":36}},{"value":"/ uniform Globals {","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63865,"byte_end":63886,"line_start":1676,"line_end":1676,"column_start":5,"column_end":26}},{"value":"/     vec2 aUniform;","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63891,"byte_end":63913,"line_start":1677,"line_end":1677,"column_start":5,"column_end":27}},{"value":"/     vec2 anotherUniform;","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63918,"byte_end":63946,"line_start":1678,"line_end":1678,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63951,"byte_end":63957,"line_start":1679,"line_end":1679,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63962,"byte_end":63969,"line_start":1680,"line_end":1680,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":2079},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":64868,"byte_end":64881,"line_start":1699,"line_end":1699,"column_start":5,"column_end":18},"name":"StorageBuffer","qualname":"::BindingType::StorageBuffer","value":"BindingType::StorageBuffer { dynamic, min_binding_size, readonly }","parent":{"krate":0,"index":2075},"children":[],"decl_id":null,"docs":" A storage buffer.","sig":null,"attributes":[{"value":"/ A storage buffer.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":64671,"byte_end":64692,"line_start":1691,"line_end":1691,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":64697,"byte_end":64700,"line_start":1692,"line_end":1692,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":64705,"byte_end":64729,"line_start":1693,"line_end":1693,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":64734,"byte_end":64751,"line_start":1694,"line_end":1694,"column_start":5,"column_end":22}},{"value":"/ layout (set=0, binding=0) buffer myStorageBuffer {","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":64756,"byte_end":64810,"line_start":1695,"line_end":1695,"column_start":5,"column_end":59}},{"value":"/     vec4 myElement[];","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":64815,"byte_end":64840,"line_start":1696,"line_end":1696,"column_start":5,"column_end":30}},{"value":"/ };","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":64845,"byte_end":64851,"line_start":1697,"line_end":1697,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":64856,"byte_end":64863,"line_start":1698,"line_end":1698,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":2083},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66075,"byte_end":66082,"line_start":1725,"line_end":1725,"column_start":5,"column_end":12},"name":"Sampler","qualname":"::BindingType::Sampler","value":"BindingType::Sampler { comparison }","parent":{"krate":0,"index":2075},"children":[],"decl_id":null,"docs":" A sampler that can be used to sample a texture.","sig":null,"attributes":[{"value":"/ A sampler that can be used to sample a texture.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":65893,"byte_end":65944,"line_start":1718,"line_end":1718,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":65949,"byte_end":65952,"line_start":1719,"line_end":1719,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":65957,"byte_end":65981,"line_start":1720,"line_end":1720,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":65986,"byte_end":66003,"line_start":1721,"line_end":1721,"column_start":5,"column_end":22}},{"value":"/ layout(binding = 0)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66008,"byte_end":66031,"line_start":1722,"line_end":1722,"column_start":5,"column_end":28}},{"value":"/ uniform sampler s;","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66036,"byte_end":66058,"line_start":1723,"line_end":1723,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66063,"byte_end":66070,"line_start":1724,"line_end":1724,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":2085},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66486,"byte_end":66500,"line_start":1737,"line_end":1737,"column_start":5,"column_end":19},"name":"SampledTexture","qualname":"::BindingType::SampledTexture","value":"BindingType::SampledTexture { dimension, component_type, multisampled }","parent":{"krate":0,"index":2075},"children":[],"decl_id":null,"docs":" A texture.","sig":null,"attributes":[{"value":"/ A texture.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66339,"byte_end":66353,"line_start":1730,"line_end":1730,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66358,"byte_end":66361,"line_start":1731,"line_end":1731,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66366,"byte_end":66390,"line_start":1732,"line_end":1732,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66395,"byte_end":66412,"line_start":1733,"line_end":1733,"column_start":5,"column_end":22}},{"value":"/ layout(binding = 0)","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66417,"byte_end":66440,"line_start":1734,"line_end":1734,"column_start":5,"column_end":28}},{"value":"/ uniform texture2D t;","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66445,"byte_end":66469,"line_start":1735,"line_end":1735,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":66474,"byte_end":66481,"line_start":1736,"line_end":1736,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":2089},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67444,"byte_end":67458,"line_start":1756,"line_end":1756,"column_start":5,"column_end":19},"name":"StorageTexture","qualname":"::BindingType::StorageTexture","value":"BindingType::StorageTexture { dimension, format, readonly }","parent":{"krate":0,"index":2075},"children":[],"decl_id":null,"docs":" A storage texture.","sig":null,"attributes":[{"value":"/ A storage texture.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67036,"byte_end":67058,"line_start":1748,"line_end":1748,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67063,"byte_end":67066,"line_start":1749,"line_end":1749,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67071,"byte_end":67095,"line_start":1750,"line_end":1750,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67100,"byte_end":67117,"line_start":1751,"line_end":1751,"column_start":5,"column_end":22}},{"value":"/ layout(set=0, binding=0, r32f) uniform image2D myStorageImage;","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67122,"byte_end":67188,"line_start":1752,"line_end":1752,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67193,"byte_end":67200,"line_start":1753,"line_end":1753,"column_start":5,"column_end":12}},{"value":"/ Note that the texture format must be specified in the shader as well.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67205,"byte_end":67278,"line_start":1754,"line_end":1754,"column_start":5,"column_end":78}},{"value":"/ A list of valid formats can be found in the specification here: https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.html#layout-qualifiers","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67283,"byte_end":67439,"line_start":1755,"line_end":1755,"column_start":5,"column_end":161}}]},{"kind":"Enum","id":{"krate":0,"index":2075},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63715,"byte_end":63726,"line_start":1670,"line_end":1670,"column_start":10,"column_end":21},"name":"BindingType","qualname":"::BindingType","value":"pub enum BindingType {\n\n    /// A buffer for uniform values.\n    ///\n    /// Example GLSL syntax:\n    /// ```cpp,ignore\n    /// layout(std140, binding = 0)\n    /// uniform Globals {\n    ///     vec2 aUniform;\n    ///     vec2 anotherUniform;\n    /// };\n    /// ```\n    UniformBuffer {\n        /// Indicates that the binding has a dynamic offset.\n        /// One offset must be passed to [`RenderPass::set_bind_group`] for each dynamic binding in increasing order of binding number.\n        dynamic: bool,\n        /// Minimum size of the corresponding `BufferBinding` required to match this entry.\n        /// When pipeline is created, the size has to cover at least the corresponding structure in the shader\n        /// plus one element of the unbound array, which can only be last in the structure.\n        /// If `None`, the check is performed at draw call time instead of pipeline and bind group creation.\n        min_binding_size: Option<BufferSize>,\n    },\n\n    /// A storage buffer.\n    ///\n    /// Example GLSL syntax:\n    /// ```cpp,ignore\n    /// layout (set=0, binding=0) buffer myStorageBuffer {\n    ///     vec4 myElement[];\n    /// };\n    /// ```\n    StorageBuffer {\n        /// Indicates that the binding has a dynamic offset.\n        /// One offset must be passed to [`RenderPass::set_bind_group`] for each dynamic binding in increasing order of binding number.\n        dynamic: bool,\n        /// Minimum size of the corresponding `BufferBinding` required to match this entry.\n        /// When pipeline is created, the size has to cover at least the corresponding structure in the shader\n        /// plus one element of the unbound array, which can only be last in the structure.\n        /// If `None`, the check is performed at draw call time instead of pipeline and bind group creation.\n        min_binding_size: Option<BufferSize>,\n        /// The buffer can only be read in the shader and it must be annotated with `readonly`.\n        ///\n        /// Example GLSL syntax:\n        /// ```cpp,ignore\n        /// layout (set=0, binding=0) readonly buffer myStorageBuffer {\n        ///     vec4 myElement[];\n        /// };\n        /// ```\n        readonly: bool,\n    },\n\n    /// A sampler that can be used to sample a texture.\n    ///\n    /// Example GLSL syntax:\n    /// ```cpp,ignore\n    /// layout(binding = 0)\n    /// uniform sampler s;\n    /// ```\n    Sampler {\n        /// Use as a comparison sampler instead of a normal sampler.\n        /// For more info take a look at the analogous functionality in OpenGL: https://www.khronos.org/opengl/wiki/Sampler_Object#Comparison_mode.\n        comparison: bool,\n    },\n\n    /// A texture.\n    ///\n    /// Example GLSL syntax:\n    /// ```cpp,ignore\n    /// layout(binding = 0)\n    /// uniform texture2D t;\n    /// ```\n    SampledTexture {\n        /// Dimension of the texture view that is going to be sampled.\n        dimension: TextureViewDimension,\n        /// Component type of the texture.\n        /// This must be compatible with the format of the texture.\n        component_type: TextureComponentType,\n        /// True if the texture has a sample count greater than 1. If this is true,\n        /// the texture must be read from shaders with `texture1DMS`, `texture2DMS`, or `texture3DMS`,\n        /// depending on `dimension`.\n        multisampled: bool,\n    },\n\n    /// A storage texture.\n    ///\n    /// Example GLSL syntax:\n    /// ```cpp,ignore\n    /// layout(set=0, binding=0, r32f) uniform image2D myStorageImage;\n    /// ```\n    /// Note that the texture format must be specified in the shader as well.\n    /// A list of valid formats can be found in the specification here: https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.html#layout-qualifiers\n    StorageTexture {\n        /// Dimension of the texture view that is going to be sampled.\n        dimension: TextureViewDimension,\n        /// Format of the texture.\n        format: TextureFormat,\n        /// The texture can only be read in the shader and it must be annotated with `readonly`.\n        ///\n        /// Example GLSL syntax:\n        /// ```cpp,ignore\n        /// layout(set=0, binding=0, r32f) readonly uniform image2D myStorageImage;\n        /// ```\n        readonly: bool,\n    },\n}","parent":null,"children":[{"krate":0,"index":2076},{"krate":0,"index":2079},{"krate":0,"index":2083},{"krate":0,"index":2085},{"krate":0,"index":2089}],"decl_id":null,"docs":" Specific type of a binding.","sig":null,"attributes":[{"value":"/ Specific type of a binding.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63440,"byte_end":63471,"line_start":1664,"line_end":1664,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63472,"byte_end":63475,"line_start":1665,"line_end":1665,"column_start":1,"column_end":4}},{"value":"/ WebGPU spec: https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":63476,"byte_end":63557,"line_start":1666,"line_end":1666,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67971,"byte_end":67989,"line_start":1772,"line_end":1772,"column_start":12,"column_end":30},"name":"has_dynamic_offset","qualname":"<BindingType>::has_dynamic_offset","value":"pub fn has_dynamic_offset(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2107},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68407,"byte_end":68427,"line_start":1785,"line_end":1785,"column_start":12,"column_end":32},"name":"BindGroupLayoutEntry","qualname":"::BindGroupLayoutEntry","value":"BindGroupLayoutEntry { binding, visibility, ty, count }","parent":null,"children":[{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2110},{"krate":0,"index":2111}],"decl_id":null,"docs":" Describes a single binding inside a bind group.\n","sig":null,"attributes":[{"value":"/ Describes a single binding inside a bind group.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68196,"byte_end":68247,"line_start":1781,"line_end":1781,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2108},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68628,"byte_end":68635,"line_start":1788,"line_end":1788,"column_start":9,"column_end":16},"name":"binding","qualname":"::BindGroupLayoutEntry::binding","value":"u32","parent":{"krate":0,"index":2107},"children":[],"decl_id":null,"docs":" Binding index. Must match shader index and be unique inside a BindGroupLayout. A binding\n of index 1, would be described as `layout(set = 0, binding = 1) uniform` in shaders.\n","sig":null,"attributes":[{"value":"/ Binding index. Must match shader index and be unique inside a BindGroupLayout. A binding","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68434,"byte_end":68526,"line_start":1786,"line_end":1786,"column_start":5,"column_end":97}},{"value":"/ of index 1, would be described as `layout(set = 0, binding = 1) uniform` in shaders.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68531,"byte_end":68619,"line_start":1787,"line_end":1787,"column_start":5,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":2109},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68700,"byte_end":68710,"line_start":1790,"line_end":1790,"column_start":9,"column_end":19},"name":"visibility","qualname":"::BindGroupLayoutEntry::visibility","value":"ShaderStage","parent":{"krate":0,"index":2107},"children":[],"decl_id":null,"docs":" Which shader stages can see this binding.\n","sig":null,"attributes":[{"value":"/ Which shader stages can see this binding.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68646,"byte_end":68691,"line_start":1789,"line_end":1789,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2110},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68765,"byte_end":68767,"line_start":1792,"line_end":1792,"column_start":9,"column_end":11},"name":"ty","qualname":"::BindGroupLayoutEntry::ty","value":"BindingType","parent":{"krate":0,"index":2107},"children":[],"decl_id":null,"docs":" The type of the binding\n","sig":null,"attributes":[{"value":"/ The type of the binding","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68729,"byte_end":68756,"line_start":1791,"line_end":1791,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2111},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69136,"byte_end":69141,"line_start":1798,"line_end":1798,"column_start":9,"column_end":14},"name":"count","qualname":"::BindGroupLayoutEntry::count","value":"std::option::Option<std::num::NonZeroU32>","parent":{"krate":0,"index":2107},"children":[],"decl_id":null,"docs":" If this value is Some, indicates this entry is an array. Array size must be 1 or greater.","sig":null,"attributes":[{"value":"/ If this value is Some, indicates this entry is an array. Array size must be 1 or greater.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68786,"byte_end":68879,"line_start":1793,"line_end":1793,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68884,"byte_end":68887,"line_start":1794,"line_end":1794,"column_start":5,"column_end":8}},{"value":"/ If this value is Some and `ty` is `BindingType::SampledTexture`, [`Capabilities::SAMPLED_TEXTURE_BINDING_ARRAY`] must be supported.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":68892,"byte_end":69027,"line_start":1795,"line_end":1795,"column_start":5,"column_end":140}},{"value":"/","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69032,"byte_end":69035,"line_start":1796,"line_end":1796,"column_start":5,"column_end":8}},{"value":"/ If this value is Some and `ty` is any other variant, bind group creation will fail.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69040,"byte_end":69127,"line_start":1797,"line_end":1797,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":2126},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69384,"byte_end":69398,"line_start":1805,"line_end":1805,"column_start":12,"column_end":26},"name":"BufferCopyView","qualname":"::BufferCopyView","value":"BufferCopyView { buffer, layout }","parent":null,"children":[{"krate":0,"index":2128},{"krate":0,"index":2129}],"decl_id":null,"docs":" View of a buffer which can be used to copy to/from a texture.\n","sig":null,"attributes":[{"value":"/ View of a buffer which can be used to copy to/from a texture.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69166,"byte_end":69231,"line_start":1801,"line_end":1801,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2128},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69453,"byte_end":69459,"line_start":1807,"line_end":1807,"column_start":9,"column_end":15},"name":"buffer","qualname":"::BufferCopyView::buffer","value":"B","parent":{"krate":0,"index":2126},"children":[],"decl_id":null,"docs":" The buffer to be copied to/from.\n","sig":null,"attributes":[{"value":"/ The buffer to be copied to/from.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69408,"byte_end":69444,"line_start":1806,"line_end":1806,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2129},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69527,"byte_end":69533,"line_start":1809,"line_end":1809,"column_start":9,"column_end":15},"name":"layout","qualname":"::BufferCopyView::layout","value":"TextureDataLayout","parent":{"krate":0,"index":2126},"children":[],"decl_id":null,"docs":" The layout of the texture data in this buffer.\n","sig":null,"attributes":[{"value":"/ The layout of the texture data in this buffer.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69468,"byte_end":69518,"line_start":1808,"line_end":1808,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":2136},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69783,"byte_end":69798,"line_start":1816,"line_end":1816,"column_start":12,"column_end":27},"name":"TextureCopyView","qualname":"::TextureCopyView","value":"TextureCopyView { texture, mip_level, origin }","parent":null,"children":[{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":2140}],"decl_id":null,"docs":" View of a texture which can be used to copy to/from a buffer/texture.\n","sig":null,"attributes":[{"value":"/ View of a texture which can be used to copy to/from a buffer/texture.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69557,"byte_end":69630,"line_start":1812,"line_end":1812,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":2138},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69854,"byte_end":69861,"line_start":1818,"line_end":1818,"column_start":9,"column_end":16},"name":"texture","qualname":"::TextureCopyView::texture","value":"T","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":" The texture to be copied to/from.\n","sig":null,"attributes":[{"value":"/ The texture to be copied to/from.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69808,"byte_end":69845,"line_start":1817,"line_end":1817,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":2139},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69919,"byte_end":69928,"line_start":1820,"line_end":1820,"column_start":9,"column_end":18},"name":"mip_level","qualname":"::TextureCopyView::mip_level","value":"u32","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":" The target mip level of the texture.\n","sig":null,"attributes":[{"value":"/ The target mip level of the texture.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69870,"byte_end":69910,"line_start":1819,"line_end":1819,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2140},"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":70010,"byte_end":70016,"line_start":1822,"line_end":1822,"column_start":9,"column_end":15},"name":"origin","qualname":"::TextureCopyView::origin","value":"Origin3d","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":" The base texel of the texture in the selected `mip_level`.\n","sig":null,"attributes":[{"value":"/ The base texel of the texture in the selected `mip_level`.","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":69939,"byte_end":70001,"line_start":1821,"line_end":1821,"column_start":5,"column_end":67}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2646,"byte_end":2661,"line_start":68,"line_end":68,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4154,"byte_end":4164,"line_start":107,"line_end":107,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4839,"byte_end":4860,"line_start":126,"line_end":126,"column_start":21,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14636,"byte_end":14642,"line_start":336,"line_end":336,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18456,"byte_end":18470,"line_start":448,"line_end":448,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18975,"byte_end":18990,"line_start":467,"line_end":467,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":19516,"byte_end":19531,"line_start":485,"line_end":485,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20406,"byte_end":20426,"line_start":508,"line_end":508,"column_start":30,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22390,"byte_end":22399,"line_start":561,"line_end":561,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22848,"byte_end":22856,"line_start":581,"line_end":581,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34148,"byte_end":34158,"line_start":822,"line_end":822,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34850,"byte_end":34872,"line_start":843,"line_end":843,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36040,"byte_end":36067,"line_start":873,"line_end":873,"column_start":6,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36692,"byte_end":36703,"line_start":894,"line_end":894,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37663,"byte_end":37679,"line_start":924,"line_end":924,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38557,"byte_end":38583,"line_start":948,"line_end":948,"column_start":6,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38842,"byte_end":38868,"line_start":957,"line_end":957,"column_start":18,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39829,"byte_end":39844,"line_start":987,"line_end":987,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43787,"byte_end":43799,"line_start":1092,"line_end":1092,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47824,"byte_end":47840,"line_start":1183,"line_end":1183,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48401,"byte_end":48425,"line_start":1202,"line_end":1202,"column_start":9,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48633,"byte_end":48657,"line_start":1210,"line_end":1210,"column_start":21,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52505,"byte_end":52510,"line_start":1306,"line_end":1306,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53754,"byte_end":53762,"line_start":1370,"line_end":1370,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53843,"byte_end":53851,"line_start":1374,"line_end":1374,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54224,"byte_end":54232,"line_start":1391,"line_end":1391,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55421,"byte_end":55438,"line_start":1424,"line_end":1424,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56194,"byte_end":56207,"line_start":1452,"line_end":1452,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56899,"byte_end":56910,"line_start":1481,"line_end":1481,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57493,"byte_end":57503,"line_start":1503,"line_end":1503,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58462,"byte_end":58485,"line_start":1531,"line_end":1531,"column_start":9,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59047,"byte_end":59069,"line_start":1549,"line_end":1549,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59273,"byte_end":59295,"line_start":1557,"line_end":1557,"column_start":21,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":60017,"byte_end":60037,"line_start":1579,"line_end":1579,"column_start":30,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67946,"byte_end":67957,"line_start":1771,"line_end":1771,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":2646,"byte_end":2661,"line_start":68,"line_end":68,"column_start":18,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":148},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4154,"byte_end":4164,"line_start":107,"line_end":107,"column_start":24,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":172},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":4839,"byte_end":4860,"line_start":126,"line_end":126,"column_start":21,"column_end":42},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":293},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":14636,"byte_end":14642,"line_start":336,"line_end":336,"column_start":18,"column_end":24},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":461},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18456,"byte_end":18470,"line_start":448,"line_end":448,"column_start":18,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":722},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":18975,"byte_end":18990,"line_start":467,"line_end":467,"column_start":6,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":752},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":19516,"byte_end":19531,"line_start":485,"line_end":485,"column_start":18,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":752},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":20406,"byte_end":20426,"line_start":508,"line_end":508,"column_start":30,"column_end":50},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":770},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22390,"byte_end":22399,"line_start":561,"line_end":561,"column_start":18,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":819},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":22848,"byte_end":22856,"line_start":581,"line_end":581,"column_start":18,"column_end":26},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":840},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34148,"byte_end":34158,"line_start":822,"line_end":822,"column_start":18,"column_end":28},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1052},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":34850,"byte_end":34872,"line_start":843,"line_end":843,"column_start":6,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36040,"byte_end":36067,"line_start":873,"line_end":873,"column_start":6,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":36692,"byte_end":36703,"line_start":894,"line_end":894,"column_start":18,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1203},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":37663,"byte_end":37679,"line_start":924,"line_end":924,"column_start":18,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1224},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38557,"byte_end":38583,"line_start":948,"line_end":948,"column_start":6,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":38842,"byte_end":38868,"line_start":957,"line_end":957,"column_start":18,"column_end":44},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":39829,"byte_end":39844,"line_start":987,"line_end":987,"column_start":6,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":43787,"byte_end":43799,"line_start":1092,"line_end":1092,"column_start":6,"column_end":18},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":47824,"byte_end":47840,"line_start":1183,"line_end":1183,"column_start":9,"column_end":25},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48401,"byte_end":48425,"line_start":1202,"line_end":1202,"column_start":9,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":48633,"byte_end":48657,"line_start":1210,"line_end":1210,"column_start":21,"column_end":45},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1618},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":52505,"byte_end":52510,"line_start":1306,"line_end":1306,"column_start":6,"column_end":11},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53754,"byte_end":53762,"line_start":1370,"line_end":1370,"column_start":6,"column_end":14},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1842},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":53843,"byte_end":53851,"line_start":1374,"line_end":1374,"column_start":18,"column_end":26},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1842},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":54224,"byte_end":54232,"line_start":1391,"line_end":1391,"column_start":18,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1861},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":55421,"byte_end":55438,"line_start":1424,"line_end":1424,"column_start":9,"column_end":26},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56194,"byte_end":56207,"line_start":1452,"line_end":1452,"column_start":18,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1910},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":56899,"byte_end":56910,"line_start":1481,"line_end":1481,"column_start":18,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1931},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":57493,"byte_end":57503,"line_start":1503,"line_end":1503,"column_start":18,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1955},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":58462,"byte_end":58485,"line_start":1531,"line_end":1531,"column_start":9,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1993},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59047,"byte_end":59069,"line_start":1549,"line_end":1549,"column_start":9,"column_end":31},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":59273,"byte_end":59295,"line_start":1557,"line_end":1557,"column_start":21,"column_end":43},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2020},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":60017,"byte_end":60037,"line_start":1579,"line_end":1579,"column_start":30,"column_end":50},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2044},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/Users/metasophiea/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.6.1/src/lib.rs","byte_start":67946,"byte_end":67957,"line_start":1771,"line_end":1771,"column_start":6,"column_end":17},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2075},"to":{"krate":4294967295,"index":4294967295}}]}